{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#Load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1686638296846,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"2IQEuYGeaPxx","outputId":"f63b6fa2-5aab-4f95-9134-8575983ea971"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638299257,"user_tz":-480,"elapsed":2421,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"4f6a0fba-00b6-497e-969f-f4ef774598e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=30\n","learning_rate=0.0001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1686638299699,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"U93M2c6OB89b","outputId":"a0af73ba-7187-4a2b-8db6-6bbf523c2afb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1686638299703,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"9CC7Vb5xCcO-","outputId":"2fed1ab0-40c7-4d55-d56a-d94e001b6a4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":148623,"status":"ok","timestamp":1686638448305,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"1v5Tym4EDvxJ","outputId":"2e2a22ee-106c-47c8-a67c-9655ec872a35"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(1.8785) Train Accuracy: 0.5524193548387096 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(0.8478) Train Accuracy: 0.7620967741935484 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.5928) Train Accuracy: 0.7983870967741935 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(0.3731) Train Accuracy: 0.8790322580645161 Test Accuracy: 0.75\n","Epoch: 4 Train Loss: tensor(0.1695) Train Accuracy: 0.9193548387096774 Test Accuracy: 0.75\n","Epoch: 5 Train Loss: tensor(0.2753) Train Accuracy: 0.907258064516129 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(0.1247) Train Accuracy: 0.9475806451612904 Test Accuracy: 0.8\n","Epoch: 7 Train Loss: tensor(0.1335) Train Accuracy: 0.9637096774193549 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.0511) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.85\n","Epoch: 9 Train Loss: tensor(0.0727) Train Accuracy: 0.9516129032258065 Test Accuracy: 0.85\n","Epoch: 10 Train Loss: tensor(0.0279) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 11 Train Loss: tensor(0.0251) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n","Epoch: 12 Train Loss: tensor(0.0149) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 13 Train Loss: tensor(0.0140) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 14 Train Loss: tensor(0.0114) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(0.0106) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.0087) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.0087) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.0064) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 19 Train Loss: tensor(0.0064) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 20 Train Loss: tensor(0.0058) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 21 Train Loss: tensor(0.0060) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 22 Train Loss: tensor(0.0056) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 23 Train Loss: tensor(0.0051) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 24 Train Loss: tensor(0.0051) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 25 Train Loss: tensor(0.0042) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 26 Train Loss: tensor(0.0043) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 27 Train Loss: tensor(0.0053) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 28 Train Loss: tensor(0.0035) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 29 Train Loss: tensor(0.0036) Train Accuracy: 1.0 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638448306,"user_tz":-480,"elapsed":35,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"1514c264-0da6-4b21-f766-a730d513257d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638448931,"user_tz":-480,"elapsed":651,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"56f0adcd-baf1-4210-a69b-88b318eb1cd9"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638255368,"user_tz":-480,"elapsed":171041,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"d3859102-8d04-44ac-d113-fe4d71d087ca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(137.3113) Train Accuracy: 0.5860655737704918 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(131.5309) Train Accuracy: 0.6434426229508197 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(13.6084) Train Accuracy: 0.8237704918032787 Test Accuracy: 0.65\n","Epoch: 3 Train Loss: tensor(12.4346) Train Accuracy: 0.8401639344262295 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(6.8606) Train Accuracy: 0.8852459016393442 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(8.8720) Train Accuracy: 0.8729508196721312 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(3.2183) Train Accuracy: 0.8934426229508197 Test Accuracy: 0.8\n","Epoch: 7 Train Loss: tensor(1.8400) Train Accuracy: 0.9344262295081968 Test Accuracy: 0.75\n","Epoch: 8 Train Loss: tensor(0.7451) Train Accuracy: 0.9590163934426229 Test Accuracy: 0.7\n","Epoch: 9 Train Loss: tensor(0.5568) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.7\n","Epoch: 10 Train Loss: tensor(0.7788) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.75\n","Epoch: 11 Train Loss: tensor(0.4976) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.8\n","Epoch: 12 Train Loss: tensor(0.3198) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.8\n","Epoch: 13 Train Loss: tensor(0.5865) Train Accuracy: 0.9672131147540983 Test Accuracy: 0.8\n","Epoch: 14 Train Loss: tensor(1.6799) Train Accuracy: 0.9672131147540983 Test Accuracy: 0.8\n","Epoch: 15 Train Loss: tensor(1.8492) Train Accuracy: 0.9508196721311475 Test Accuracy: 0.8\n","Epoch: 16 Train Loss: tensor(2.1469) Train Accuracy: 0.9221311475409836 Test Accuracy: 0.8\n","Epoch: 17 Train Loss: tensor(1.9154) Train Accuracy: 0.9385245901639344 Test Accuracy: 0.8\n","Epoch: 18 Train Loss: tensor(1.3745) Train Accuracy: 0.9549180327868853 Test Accuracy: 0.75\n","Epoch: 19 Train Loss: tensor(0.1746) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.85\n","Epoch: 20 Train Loss: tensor(0.6586) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.75\n","Epoch: 21 Train Loss: tensor(0.0343) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.8\n","Epoch: 22 Train Loss: tensor(0.0951) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.8\n","Epoch: 23 Train Loss: tensor(0.0371) Train Accuracy: 0.9877049180327869 Test Accuracy: 0.85\n","Epoch: 24 Train Loss: tensor(0.1358) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.85\n","Epoch: 25 Train Loss: tensor(0.0341) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n","Epoch: 26 Train Loss: tensor(0.0269) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n","Epoch: 27 Train Loss: tensor(9.8200e-08) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 28 Train Loss: tensor(3.7080e-07) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 29 Train Loss: tensor(0.1672) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.75\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638256000,"user_tz":-480,"elapsed":19,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"7ee22d77-7c09-4b64-cd95-52155f9d8498"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638256000,"user_tz":-480,"elapsed":14,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"b80de988-6653-4754-c322-0c6bcdb2b684"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686638296291,"user_tz":-480,"elapsed":40299,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"6b8dba7b-b868-481c-96a3-27ecf2826569"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.6937) Train Accuracy: 0.5714285714285714 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(169.2825) Train Accuracy: 0.44642857142857145 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(208.1733) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.4\n","Epoch: 3 Train Loss: tensor(96.0793) Train Accuracy: 0.6964285714285714 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(42.0140) Train Accuracy: 0.8035714285714286 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(88.6628) Train Accuracy: 0.6428571428571429 Test Accuracy: 0.6\n","Epoch: 6 Train Loss: tensor(12.9983) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(20.5282) Train Accuracy: 0.6607142857142857 Test Accuracy: 0.4\n","Epoch: 8 Train Loss: tensor(37.7771) Train Accuracy: 0.6428571428571429 Test Accuracy: 0.4\n","Epoch: 9 Train Loss: tensor(5.7924) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.4\n","Epoch: 10 Train Loss: tensor(14.1681) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.3\n","Epoch: 11 Train Loss: tensor(19.4358) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 12 Train Loss: tensor(14.0027) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 13 Train Loss: tensor(5.1617) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 14 Train Loss: tensor(6.0088) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 15 Train Loss: tensor(6.5061) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 16 Train Loss: tensor(3.8369) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(0.0051) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(1.2157) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 19 Train Loss: tensor(1.7255) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 20 Train Loss: tensor(1.5803) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 21 Train Loss: tensor(0.8709) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 22 Train Loss: tensor(0.0694) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 23 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 24 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 25 Train Loss: tensor(1.7928e-05) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 26 Train Loss: tensor(0.7424) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 27 Train Loss: tensor(0.3718) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 28 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 29 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.5\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"19KP9dYQ22xZJQ8oSHTsVoNnVFeB245S8","timestamp":1686637594560},{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}