{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1687151834878,"user_tz":-480,"elapsed":3362,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"721c5dfd-f4b2-4317-fdf6-87f588a4d26d"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchview in /usr/local/lib/python3.10/dist-packages (0.2.6)\n"]}]},{"cell_type":"code","execution_count":19,"metadata":{"id":"HDHc7dfUaCOk","executionInfo":{"status":"ok","timestamp":1687151835443,"user_tz":-480,"elapsed":577,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1687151835445,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"2IQEuYGeaPxx","outputId":"742f5f2e-048c-4000-b88a-2e6a80ea8833"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1687151838313,"user_tz":-480,"elapsed":2881,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"91c39745-994e-44ce-eaab-8faff69e2cd4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"ETZzsz931OMi","executionInfo":{"status":"ok","timestamp":1687151838319,"user_tz":-480,"elapsed":29,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"e15qznp2d5Kp","executionInfo":{"status":"ok","timestamp":1687151838323,"user_tz":-480,"elapsed":31,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"6nzgq46V1Tbx","executionInfo":{"status":"ok","timestamp":1687151838325,"user_tz":-480,"elapsed":31,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["\n","num_epochs=10\n","learning_rate=0.01"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"OORJMQUTBv-f","executionInfo":{"status":"ok","timestamp":1687151838327,"user_tz":-480,"elapsed":32,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"CQTXemq0B0wy","colab":{"base_uri":"https://localhost:8080/","height":398},"executionInfo":{"status":"error","timestamp":1687151840250,"user_tz":-480,"elapsed":1954,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"42602502-0d4e-4338-e9a0-a2f601ffd1be"},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-5f820cac9bd7>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m spiral_train_loader=DataLoader(\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mtorchvision\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImageFolder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspiral_train_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransformer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m )\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, root, transform, target_transform, loader, is_valid_file)\u001b[0m\n\u001b[1;32m    307\u001b[0m         \u001b[0mis_valid_file\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mCallable\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m     ):\n\u001b[0;32m--> 309\u001b[0;31m         super().__init__(\n\u001b[0m\u001b[1;32m    310\u001b[0m             \u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mloader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, root, loader, extensions, transform, target_transform, is_valid_file)\u001b[0m\n\u001b[1;32m    143\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_transform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0mclasses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_to_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 145\u001b[0;31m         \u001b[0msamples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_to_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextensions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_valid_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    146\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mmake_dataset\u001b[0;34m(directory, class_to_idx, extensions, is_valid_file)\u001b[0m\n\u001b[1;32m    187\u001b[0m             \u001b[0;31m# is potentially overridden and thus could have a different logic.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The class_to_idx parameter cannot be None.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmake_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_to_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextensions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mextensions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_valid_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mis_valid_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mfind_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirectory\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mmake_dataset\u001b[0;34m(directory, class_to_idx, extensions, is_valid_file)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mextensions\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34mf\"Supported extensions are: {extensions if isinstance(extensions, str) else ', '.join(extensions)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minstances\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: Found no valid file for the classes models. Supported extensions are: .jpg, .jpeg, .png, .ppm, .bmp, .pgm, .tif, .tiff, .webp"]}],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":58,"status":"aborted","timestamp":1687151840254,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"U93M2c6OB89b"},"outputs":[],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":55,"status":"aborted","timestamp":1687151840255,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"9CC7Vb5xCcO-"},"outputs":[],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4","executionInfo":{"status":"aborted","timestamp":1687151840259,"user_tz":-480,"elapsed":58,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1v5Tym4EDvxJ","executionInfo":{"status":"aborted","timestamp":1687151840261,"user_tz":-480,"elapsed":60,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG","executionInfo":{"status":"aborted","timestamp":1687151840262,"user_tz":-480,"elapsed":60,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO","executionInfo":{"status":"aborted","timestamp":1687151840269,"user_tz":-480,"elapsed":66,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","executionInfo":{"status":"aborted","timestamp":1687151840272,"user_tz":-480,"elapsed":69,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","executionInfo":{"status":"aborted","timestamp":1687151840273,"user_tz":-480,"elapsed":70,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn","executionInfo":{"status":"aborted","timestamp":1687151840274,"user_tz":-480,"elapsed":70,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","executionInfo":{"status":"aborted","timestamp":1687151840280,"user_tz":-480,"elapsed":76,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A","executionInfo":{"status":"aborted","timestamp":1687151840283,"user_tz":-480,"elapsed":79,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE","executionInfo":{"status":"aborted","timestamp":1687151840284,"user_tz":-480,"elapsed":79,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","executionInfo":{"status":"aborted","timestamp":1687151840286,"user_tz":-480,"elapsed":81,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","executionInfo":{"status":"aborted","timestamp":1687151840287,"user_tz":-480,"elapsed":81,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm","executionInfo":{"status":"aborted","timestamp":1687151840288,"user_tz":-480,"elapsed":81,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","executionInfo":{"status":"aborted","timestamp":1687151840291,"user_tz":-480,"elapsed":83,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"outputs":[],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg","executionInfo":{"status":"aborted","timestamp":1687151840292,"user_tz":-480,"elapsed":84,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}}},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}