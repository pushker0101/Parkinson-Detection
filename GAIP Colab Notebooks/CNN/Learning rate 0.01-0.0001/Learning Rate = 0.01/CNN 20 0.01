{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686978336912,"user_tz":-330,"elapsed":5166,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"0587016a-8ae9-4d42-fc8c-b4ea926966d5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"HDHc7dfUaCOk","executionInfo":{"status":"ok","timestamp":1686978341873,"user_tz":-330,"elapsed":4968,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1686978341875,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"36dba9ae-b57d-4bea-b207-5576ac5f0afb"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978358630,"user_tz":-330,"elapsed":16768,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"b34eac57-62eb-4470-e525-00dff26e77a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"ETZzsz931OMi","executionInfo":{"status":"ok","timestamp":1686978358633,"user_tz":-330,"elapsed":27,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"e15qznp2d5Kp","executionInfo":{"status":"ok","timestamp":1686978358634,"user_tz":-330,"elapsed":26,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"6nzgq46V1Tbx","executionInfo":{"status":"ok","timestamp":1686978358634,"user_tz":-330,"elapsed":24,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["num_epochs=20\n","learning_rate=0.01"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"OORJMQUTBv-f","executionInfo":{"status":"ok","timestamp":1686978358635,"user_tz":-330,"elapsed":22,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"CQTXemq0B0wy","executionInfo":{"status":"ok","timestamp":1686978359749,"user_tz":-330,"elapsed":1133,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1686978359750,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"139ada0a-d0a8-4a87-b2d9-decf8b4a9718"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1686978359751,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"ddf6a99e-c136-4dae-a5ae-e0870e88bdd9"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"rsAJ3HKVDvX4","executionInfo":{"status":"ok","timestamp":1686978365187,"user_tz":-330,"elapsed":5443,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1v5Tym4EDvxJ","outputId":"7507aba1-cffa-441b-f091-845f472d0879","executionInfo":{"status":"ok","timestamp":1686978514528,"user_tz":-330,"elapsed":149346,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(153.1162) Train Accuracy: 0.5846774193548387 Test Accuracy: 0.3\n","Epoch: 1 Train Loss: tensor(37.9802) Train Accuracy: 0.7540322580645161 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(37.6960) Train Accuracy: 0.7580645161290323 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(18.1611) Train Accuracy: 0.8508064516129032 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(14.4886) Train Accuracy: 0.8830645161290323 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(5.2511) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.55\n","Epoch: 6 Train Loss: tensor(5.2072) Train Accuracy: 0.9314516129032258 Test Accuracy: 0.7\n","Epoch: 7 Train Loss: tensor(3.2756) Train Accuracy: 0.9516129032258065 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(2.1954) Train Accuracy: 0.9435483870967742 Test Accuracy: 0.85\n","Epoch: 9 Train Loss: tensor(1.4715) Train Accuracy: 0.9596774193548387 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(0.6315) Train Accuracy: 0.9879032258064516 Test Accuracy: 0.95\n","Epoch: 11 Train Loss: tensor(0.3628) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.95\n","Epoch: 12 Train Loss: tensor(0.1370) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.95\n","Epoch: 13 Train Loss: tensor(0.0899) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.95\n","Epoch: 14 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.95\n","Epoch: 15 Train Loss: tensor(0.1639) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.8\n","Epoch: 16 Train Loss: tensor(0.5331) Train Accuracy: 0.967741935483871 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.6616) Train Accuracy: 0.9717741935483871 Test Accuracy: 0.95\n","Epoch: 18 Train Loss: tensor(0.2150) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.95\n","Epoch: 19 Train Loss: tensor(0.2270) Train Accuracy: 0.9758064516129032 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"MeDbhMIGSTYG","executionInfo":{"status":"ok","timestamp":1686978514528,"user_tz":-330,"elapsed":6,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"zI5niO7aSWwO","executionInfo":{"status":"ok","timestamp":1686978515602,"user_tz":-330,"elapsed":1078,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978515603,"user_tz":-330,"elapsed":16,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"b08582f3-9da4-47e2-facd-9ae56c9ec4a6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978515604,"user_tz":-330,"elapsed":14,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"4e2757ba-899b-4a0c-fae8-067817f0f233"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"_Y5T9jogSunn","executionInfo":{"status":"ok","timestamp":1686978515604,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978629303,"user_tz":-330,"elapsed":113709,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"28e69221-07d8-4bce-d8a6-26c80609c746"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(223.4218) Train Accuracy: 0.5122950819672131 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(115.3120) Train Accuracy: 0.6516393442622951 Test Accuracy: 0.65\n","Epoch: 2 Train Loss: tensor(63.6958) Train Accuracy: 0.7622950819672131 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(39.1191) Train Accuracy: 0.7786885245901639 Test Accuracy: 0.9\n","Epoch: 4 Train Loss: tensor(36.7927) Train Accuracy: 0.7459016393442623 Test Accuracy: 0.8\n","Epoch: 5 Train Loss: tensor(26.8183) Train Accuracy: 0.8442622950819673 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(13.4438) Train Accuracy: 0.8442622950819673 Test Accuracy: 0.9\n","Epoch: 7 Train Loss: tensor(10.6388) Train Accuracy: 0.9098360655737705 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(7.8304) Train Accuracy: 0.9180327868852459 Test Accuracy: 0.75\n","Epoch: 9 Train Loss: tensor(6.0753) Train Accuracy: 0.9098360655737705 Test Accuracy: 0.7\n","Epoch: 10 Train Loss: tensor(4.8044) Train Accuracy: 0.930327868852459 Test Accuracy: 0.8\n","Epoch: 11 Train Loss: tensor(2.3915) Train Accuracy: 0.9631147540983607 Test Accuracy: 0.75\n","Epoch: 12 Train Loss: tensor(3.7518) Train Accuracy: 0.9426229508196722 Test Accuracy: 0.85\n","Epoch: 13 Train Loss: tensor(1.8873) Train Accuracy: 0.9631147540983607 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(0.7620) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.9\n","Epoch: 15 Train Loss: tensor(0.6906) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.8871) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.4645) Train Accuracy: 0.9877049180327869 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.3339) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.9\n","Epoch: 19 Train Loss: tensor(0.7852) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"cajwucXI9k_A","executionInfo":{"status":"ok","timestamp":1686978629304,"user_tz":-330,"elapsed":43,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"-Y9EE7rE9pIE","executionInfo":{"status":"ok","timestamp":1686978629863,"user_tz":-330,"elapsed":565,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978629865,"user_tz":-330,"elapsed":26,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"1edd6fcf-319c-4bbb-adee-d0529c5a49f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978629866,"user_tz":-330,"elapsed":16,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"84802962-3839-4101-b1b2-25faa112c08a"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"cbcuCJOu-cnm","executionInfo":{"status":"ok","timestamp":1686978629867,"user_tz":-330,"elapsed":12,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686978654668,"user_tz":-330,"elapsed":24812,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"a36ac3d7-484f-4450-cfea-f50b50be91e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.7103) Train Accuracy: 0.48214285714285715 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(425.9741) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(76.1192) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(347.8645) Train Accuracy: 0.44642857142857145 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(109.3103) Train Accuracy: 0.5714285714285714 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(23.0518) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(68.6131) Train Accuracy: 0.6607142857142857 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(17.6677) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 8 Train Loss: tensor(28.6711) Train Accuracy: 0.8035714285714286 Test Accuracy: 0.5\n","Epoch: 9 Train Loss: tensor(8.8811) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.5\n","Epoch: 10 Train Loss: tensor(12.8383) Train Accuracy: 0.8928571428571429 Test Accuracy: 0.5\n","Epoch: 11 Train Loss: tensor(7.0652) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 12 Train Loss: tensor(17.5761) Train Accuracy: 0.8214285714285714 Test Accuracy: 0.5\n","Epoch: 13 Train Loss: tensor(6.2984) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 14 Train Loss: tensor(7.1715) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 15 Train Loss: tensor(3.5084) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 16 Train Loss: tensor(2.2989) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(2.9114) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(1.8881) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 19 Train Loss: tensor(0.0016) Train Accuracy: 1.0 Test Accuracy: 0.5\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg","executionInfo":{"status":"ok","timestamp":1686978654670,"user_tz":-330,"elapsed":52,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"execution_count":25,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}