{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686984361383,"user_tz":-330,"elapsed":5323,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"0c1bfe02-b9eb-4fc6-ec83-d5a89ccc0d7b"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"HDHc7dfUaCOk","executionInfo":{"status":"ok","timestamp":1686984365458,"user_tz":-330,"elapsed":4079,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1686984365460,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"3152fab2-dfa1-43fa-9114-71692735764c"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984520859,"user_tz":-330,"elapsed":155416,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"2333aa4b-07dd-44bd-80ca-548953f97975"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"ETZzsz931OMi","executionInfo":{"status":"ok","timestamp":1686984520860,"user_tz":-330,"elapsed":17,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"e15qznp2d5Kp","executionInfo":{"status":"ok","timestamp":1686984520861,"user_tz":-330,"elapsed":15,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"6nzgq46V1Tbx","executionInfo":{"status":"ok","timestamp":1686984520861,"user_tz":-330,"elapsed":14,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["num_epochs=30\n","learning_rate=0.01"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"OORJMQUTBv-f","executionInfo":{"status":"ok","timestamp":1686984520862,"user_tz":-330,"elapsed":15,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"CQTXemq0B0wy","executionInfo":{"status":"ok","timestamp":1686984521906,"user_tz":-330,"elapsed":1058,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1686984521906,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"050f73e1-8d9e-41de-d241-59854e9a7c48"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1686984521907,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"886b3912-0bdb-4825-957c-d0490954f663"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"rsAJ3HKVDvX4","executionInfo":{"status":"ok","timestamp":1686984526407,"user_tz":-330,"elapsed":4505,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1v5Tym4EDvxJ","outputId":"88a5c99e-3c4f-458e-ecb8-7b8b8d668979","executionInfo":{"status":"ok","timestamp":1686984703334,"user_tz":-330,"elapsed":176931,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(135.2094) Train Accuracy: 0.5282258064516129 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(96.2810) Train Accuracy: 0.717741935483871 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(47.9277) Train Accuracy: 0.7983870967741935 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(17.5517) Train Accuracy: 0.8870967741935484 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(12.6338) Train Accuracy: 0.8870967741935484 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(11.2008) Train Accuracy: 0.9314516129032258 Test Accuracy: 0.6\n","Epoch: 6 Train Loss: tensor(7.4030) Train Accuracy: 0.9233870967741935 Test Accuracy: 0.7\n","Epoch: 7 Train Loss: tensor(12.2289) Train Accuracy: 0.875 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(4.3657) Train Accuracy: 0.9475806451612904 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(3.0850) Train Accuracy: 0.9637096774193549 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(1.2974) Train Accuracy: 0.9717741935483871 Test Accuracy: 0.9\n","Epoch: 11 Train Loss: tensor(1.3350) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.9\n","Epoch: 12 Train Loss: tensor(1.8351) Train Accuracy: 0.9435483870967742 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(4.3601) Train Accuracy: 0.9314516129032258 Test Accuracy: 0.85\n","Epoch: 14 Train Loss: tensor(4.7457) Train Accuracy: 0.8951612903225806 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(4.1586) Train Accuracy: 0.9314516129032258 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.6536) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.85\n","Epoch: 17 Train Loss: tensor(2.7199) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.8\n","Epoch: 18 Train Loss: tensor(0.4803) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.9\n","Epoch: 19 Train Loss: tensor(1.0898) Train Accuracy: 0.9758064516129032 Test Accuracy: 0.9\n","Epoch: 20 Train Loss: tensor(0.7213) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.9\n","Epoch: 21 Train Loss: tensor(0.9321) Train Accuracy: 0.967741935483871 Test Accuracy: 0.9\n","Epoch: 22 Train Loss: tensor(0.4604) Train Accuracy: 0.9879032258064516 Test Accuracy: 0.9\n","Epoch: 23 Train Loss: tensor(0.0131) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n","Epoch: 24 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 25 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 26 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 27 Train Loss: tensor(0.0078) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n","Epoch: 28 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 29 Train Loss: tensor(0.1760) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"MeDbhMIGSTYG","executionInfo":{"status":"ok","timestamp":1686984703335,"user_tz":-330,"elapsed":8,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"zI5niO7aSWwO","executionInfo":{"status":"ok","timestamp":1686984703825,"user_tz":-330,"elapsed":496,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984704130,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"2f6bed7f-4854-4088-dfae-9e86d1088d9e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984704131,"user_tz":-330,"elapsed":9,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"8601d0b8-e580-4838-ff31-070b6230d7ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"_Y5T9jogSunn","executionInfo":{"status":"ok","timestamp":1686984704131,"user_tz":-330,"elapsed":6,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984829227,"user_tz":-330,"elapsed":125101,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"95f14029-0bfb-4072-f34e-22e546b4460f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(185.4928) Train Accuracy: 0.47950819672131145 Test Accuracy: 0.65\n","Epoch: 1 Train Loss: tensor(74.9237) Train Accuracy: 0.7459016393442623 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(58.7816) Train Accuracy: 0.7213114754098361 Test Accuracy: 0.8\n","Epoch: 3 Train Loss: tensor(51.2621) Train Accuracy: 0.7950819672131147 Test Accuracy: 0.8\n","Epoch: 4 Train Loss: tensor(21.2269) Train Accuracy: 0.8073770491803278 Test Accuracy: 0.7\n","Epoch: 5 Train Loss: tensor(15.7015) Train Accuracy: 0.8647540983606558 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(10.3866) Train Accuracy: 0.8975409836065574 Test Accuracy: 0.75\n","Epoch: 7 Train Loss: tensor(9.2021) Train Accuracy: 0.889344262295082 Test Accuracy: 0.85\n","Epoch: 8 Train Loss: tensor(12.6151) Train Accuracy: 0.8729508196721312 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(6.4454) Train Accuracy: 0.9385245901639344 Test Accuracy: 0.75\n","Epoch: 10 Train Loss: tensor(3.8264) Train Accuracy: 0.9180327868852459 Test Accuracy: 0.7\n","Epoch: 11 Train Loss: tensor(4.8215) Train Accuracy: 0.9467213114754098 Test Accuracy: 0.75\n","Epoch: 12 Train Loss: tensor(2.2604) Train Accuracy: 0.9385245901639344 Test Accuracy: 0.75\n","Epoch: 13 Train Loss: tensor(2.7016) Train Accuracy: 0.9590163934426229 Test Accuracy: 0.75\n","Epoch: 14 Train Loss: tensor(1.3430) Train Accuracy: 0.9713114754098361 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(0.8664) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.8\n","Epoch: 16 Train Loss: tensor(2.7907) Train Accuracy: 0.9426229508196722 Test Accuracy: 0.85\n","Epoch: 17 Train Loss: tensor(0.6193) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.8\n","Epoch: 18 Train Loss: tensor(0.8411) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.8\n","Epoch: 19 Train Loss: tensor(1.1043) Train Accuracy: 0.9549180327868853 Test Accuracy: 0.8\n","Epoch: 20 Train Loss: tensor(0.7961) Train Accuracy: 0.9713114754098361 Test Accuracy: 0.9\n","Epoch: 21 Train Loss: tensor(3.4199e-09) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 22 Train Loss: tensor(0.5490) Train Accuracy: 0.9877049180327869 Test Accuracy: 0.85\n","Epoch: 23 Train Loss: tensor(0.0267) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n","Epoch: 24 Train Loss: tensor(0.3885) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.85\n","Epoch: 25 Train Loss: tensor(0.8187) Train Accuracy: 0.9672131147540983 Test Accuracy: 0.85\n","Epoch: 26 Train Loss: tensor(0.3191) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.75\n","Epoch: 27 Train Loss: tensor(0.0898) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.85\n","Epoch: 28 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 29 Train Loss: tensor(0.0206) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"cajwucXI9k_A","executionInfo":{"status":"ok","timestamp":1686984829227,"user_tz":-330,"elapsed":7,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"-Y9EE7rE9pIE","executionInfo":{"status":"ok","timestamp":1686984830534,"user_tz":-330,"elapsed":1312,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984830535,"user_tz":-330,"elapsed":12,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"9c47f880-2b12-413d-874f-6152bd92297e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984830536,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"5c3b21f0-50d1-44cb-85ca-37d6b542c94b"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"cbcuCJOu-cnm","executionInfo":{"status":"ok","timestamp":1686984830536,"user_tz":-330,"elapsed":7,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686984851701,"user_tz":-330,"elapsed":21171,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"cfdf97ea-8188-4b07-8284-bd855b943b68"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.6933) Train Accuracy: 0.5357142857142857 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(39.9909) Train Accuracy: 0.6964285714285714 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(449.5694) Train Accuracy: 0.44642857142857145 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(112.2472) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(101.5682) Train Accuracy: 0.6607142857142857 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(94.5961) Train Accuracy: 0.75 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(48.8995) Train Accuracy: 0.8035714285714286 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(26.1899) Train Accuracy: 0.7857142857142857 Test Accuracy: 0.4\n","Epoch: 8 Train Loss: tensor(10.7673) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 9 Train Loss: tensor(9.5840) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 10 Train Loss: tensor(3.7673) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 11 Train Loss: tensor(27.5080) Train Accuracy: 0.7321428571428571 Test Accuracy: 0.5\n","Epoch: 12 Train Loss: tensor(15.8223) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 13 Train Loss: tensor(17.7808) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 14 Train Loss: tensor(3.0633) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 15 Train Loss: tensor(2.9969) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 16 Train Loss: tensor(5.6067) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(2.1507) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(0.6997) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 19 Train Loss: tensor(6.2390) Train Accuracy: 0.875 Test Accuracy: 0.3\n","Epoch: 20 Train Loss: tensor(2.9390e-05) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 21 Train Loss: tensor(1.9103) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 22 Train Loss: tensor(0.5074) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 23 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 24 Train Loss: tensor(0.0002) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 25 Train Loss: tensor(0.5403) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 26 Train Loss: tensor(0.5043) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 27 Train Loss: tensor(0.3502) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 28 Train Loss: tensor(0.1798) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 29 Train Loss: tensor(6.3862e-09) Train Accuracy: 1.0 Test Accuracy: 0.5\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg","executionInfo":{"status":"ok","timestamp":1686984851702,"user_tz":-330,"elapsed":20,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"execution_count":25,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}