{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686985038158,"user_tz":-330,"elapsed":6179,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"5ee9e941-0f9d-4782-fc47-43df94c6b051"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1686985042170,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"19a9f2fc-2f06-459f-e15f-928be3a326eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985077599,"user_tz":-330,"elapsed":35438,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"3248de49-8745-4200-937a-51054ade6c65"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=10\n","learning_rate=0.0001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":947,"status":"ok","timestamp":1686985082195,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"6fa16170-ec73-4e16-9888-439f4b3cde76"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1686985082196,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"ed2bbe6f-38de-471e-f182-475f2cae4ad9"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1v5Tym4EDvxJ","outputId":"46ccbfe8-8ed8-4277-e194-c1d33ed83224","executionInfo":{"status":"ok","timestamp":1686985254614,"user_tz":-330,"elapsed":168106,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(1.8553) Train Accuracy: 0.5766129032258065 Test Accuracy: 0.6\n","Epoch: 1 Train Loss: tensor(0.9993) Train Accuracy: 0.717741935483871 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.4743) Train Accuracy: 0.8185483870967742 Test Accuracy: 0.6\n","Epoch: 3 Train Loss: tensor(0.6453) Train Accuracy: 0.8508064516129032 Test Accuracy: 0.75\n","Epoch: 4 Train Loss: tensor(0.3968) Train Accuracy: 0.8629032258064516 Test Accuracy: 0.65\n","Epoch: 5 Train Loss: tensor(0.2482) Train Accuracy: 0.9193548387096774 Test Accuracy: 0.75\n","Epoch: 6 Train Loss: tensor(0.2049) Train Accuracy: 0.9193548387096774 Test Accuracy: 0.9\n","Epoch: 7 Train Loss: tensor(0.1310) Train Accuracy: 0.9435483870967742 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.1729) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.85\n","Epoch: 9 Train Loss: tensor(0.0749) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985255867,"user_tz":-330,"elapsed":17,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"d3d8e0ec-2d3e-4caa-d9c3-ae5bd0b961b9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985255869,"user_tz":-330,"elapsed":16,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"28afa9ed-57f0-4d8d-8e48-b019fa5ac12a"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985396221,"user_tz":-330,"elapsed":140364,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"641225a1-591c-4be4-f62c-a69aa936a7b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(1.0680) Train Accuracy: 0.610655737704918 Test Accuracy: 0.55\n","Epoch: 1 Train Loss: tensor(0.4282) Train Accuracy: 0.8155737704918032 Test Accuracy: 0.6\n","Epoch: 2 Train Loss: tensor(0.2542) Train Accuracy: 0.8934426229508197 Test Accuracy: 0.55\n","Epoch: 3 Train Loss: tensor(0.1408) Train Accuracy: 0.9385245901639344 Test Accuracy: 0.65\n","Epoch: 4 Train Loss: tensor(0.1561) Train Accuracy: 0.9344262295081968 Test Accuracy: 0.7\n","Epoch: 5 Train Loss: tensor(0.0846) Train Accuracy: 0.9631147540983607 Test Accuracy: 0.6\n","Epoch: 6 Train Loss: tensor(0.0417) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n","Epoch: 7 Train Loss: tensor(0.0426) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.0260) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(0.0222) Train Accuracy: 1.0 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985398033,"user_tz":-330,"elapsed":22,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"238c1af0-4183-4a7f-ca74-55cabc168a65"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985398034,"user_tz":-330,"elapsed":13,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"c71fc4d4-0882-43b2-f41a-17e71467c1d7"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686985448721,"user_tz":-330,"elapsed":50695,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"79a43a03-da4b-4467-d3d7-9b36db367e41"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.7874) Train Accuracy: 0.35714285714285715 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(2.2320) Train Accuracy: 0.5714285714285714 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.7580) Train Accuracy: 0.7857142857142857 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(1.6875) Train Accuracy: 0.6071428571428571 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(0.8518) Train Accuracy: 0.75 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(0.4167) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.6\n","Epoch: 6 Train Loss: tensor(0.6189) Train Accuracy: 0.8214285714285714 Test Accuracy: 0.6\n","Epoch: 7 Train Loss: tensor(0.6586) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.6\n","Epoch: 8 Train Loss: tensor(0.3937) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.4\n","Epoch: 9 Train Loss: tensor(0.1139) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.3\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}