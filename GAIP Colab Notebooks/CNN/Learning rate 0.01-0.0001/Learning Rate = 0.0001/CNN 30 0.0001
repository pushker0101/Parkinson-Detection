{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4914,"status":"ok","timestamp":1686986354679,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"QyoFRiShY9WG","outputId":"94fb9e3f-0a90-4eda-9544-a38af1d1ec12"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}],"source":["!pip install torchview"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1686986359242,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"95e1894d-b727-4afc-a424-f527bb81d795"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16045,"status":"ok","timestamp":1686986375281,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"mTqD3Y7rSokd","outputId":"e62f6e11-ac1c-4c34-a9df-3a25143f1af3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=30\n","learning_rate=0.0001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1686986376581,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"f5bd5049-b608-4c60-fa95-d6363483f368"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1686986376583,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"2524959a-d4ce-40fd-942e-8978b3a740cf"},"outputs":[{"name":"stdout","output_type":"stream","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":186837,"status":"ok","timestamp":1686986568242,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"1v5Tym4EDvxJ","outputId":"9120f363-9223-4ae4-fbb7-9668aa45bb1f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch: 0 Train Loss: tensor(2.4013) Train Accuracy: 0.5282258064516129 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(1.3202) Train Accuracy: 0.6209677419354839 Test Accuracy: 0.55\n","Epoch: 2 Train Loss: tensor(0.7521) Train Accuracy: 0.8185483870967742 Test Accuracy: 0.6\n","Epoch: 3 Train Loss: tensor(0.2822) Train Accuracy: 0.8911290322580645 Test Accuracy: 0.7\n","Epoch: 4 Train Loss: tensor(0.4328) Train Accuracy: 0.8709677419354839 Test Accuracy: 0.8\n","Epoch: 5 Train Loss: tensor(0.3433) Train Accuracy: 0.8911290322580645 Test Accuracy: 0.7\n","Epoch: 6 Train Loss: tensor(0.2898) Train Accuracy: 0.9112903225806451 Test Accuracy: 0.85\n","Epoch: 7 Train Loss: tensor(0.1341) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.1394) Train Accuracy: 0.9516129032258065 Test Accuracy: 0.85\n","Epoch: 9 Train Loss: tensor(0.0902) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.85\n","Epoch: 10 Train Loss: tensor(0.0637) Train Accuracy: 0.967741935483871 Test Accuracy: 0.85\n","Epoch: 11 Train Loss: tensor(0.0537) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.8\n","Epoch: 12 Train Loss: tensor(0.0298) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.85\n","Epoch: 13 Train Loss: tensor(0.0305) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.85\n","Epoch: 14 Train Loss: tensor(0.0215) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(0.0179) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 16 Train Loss: tensor(0.0175) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 17 Train Loss: tensor(0.0119) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 18 Train Loss: tensor(0.0138) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 19 Train Loss: tensor(0.0092) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 20 Train Loss: tensor(0.0090) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 21 Train Loss: tensor(0.0087) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 22 Train Loss: tensor(0.0075) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 23 Train Loss: tensor(0.0080) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 24 Train Loss: tensor(0.0077) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 25 Train Loss: tensor(0.0077) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 26 Train Loss: tensor(0.0068) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 27 Train Loss: tensor(0.0060) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 28 Train Loss: tensor(0.0067) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 29 Train Loss: tensor(0.0055) Train Accuracy: 1.0 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1686986569606,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"YMjGldWQSsGz","outputId":"22e77ce5-4992-47fe-f50a-ddd325df3f3e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1686986569608,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"BrN8lM8nSs47","outputId":"27c7d994-b31c-4def-f1a0-f5b203f5e060"},"outputs":[{"name":"stdout","output_type":"stream","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"lcEHXfEiSwPR","outputId":"3ad242d7-91d1-4bc7-dc07-2ab1a267ecf4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch: 0 Train Loss: tensor(0.9291) Train Accuracy: 0.610655737704918 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(0.5681) Train Accuracy: 0.8278688524590164 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.3773) Train Accuracy: 0.8565573770491803 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(0.2660) Train Accuracy: 0.9016393442622951 Test Accuracy: 0.55\n","Epoch: 4 Train Loss: tensor(0.1788) Train Accuracy: 0.9057377049180327 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(0.0788) Train Accuracy: 0.9672131147540983 Test Accuracy: 0.65\n","Epoch: 6 Train Loss: tensor(0.0706) Train Accuracy: 0.9590163934426229 Test Accuracy: 0.6\n","Epoch: 7 Train Loss: tensor(0.0611) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.65\n","Epoch: 8 Train Loss: tensor(0.0279) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.0310) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(0.0141) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 11 Train Loss: tensor(0.0144) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 12 Train Loss: tensor(0.0087) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(0.0063) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(0.0064) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 15 Train Loss: tensor(0.0046) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.0054) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.0041) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.0040) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 19 Train Loss: tensor(0.0035) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 20 Train Loss: tensor(0.0038) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 21 Train Loss: tensor(0.0033) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 22 Train Loss: tensor(0.0032) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 23 Train Loss: tensor(0.0030) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 24 Train Loss: tensor(0.0031) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 25 Train Loss: tensor(0.0034) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 26 Train Loss: tensor(0.0032) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 27 Train Loss: tensor(0.0027) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 28 Train Loss: tensor(0.0027) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 29 Train Loss: tensor(0.0025) Train Accuracy: 1.0 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"NxaTYA2Y95Hx","outputId":"6be65993-a01b-4d6f-ecbd-fca43e7700d3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"xUfwtdas-A6L","outputId":"6cbdc720-b55d-48c2-9dff-73399d9be147"},"outputs":[{"name":"stdout","output_type":"stream","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"C0MbmMpG-iNw","outputId":"0042ab66-036b-44c8-9a1d-61fe7419e6f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch: 0 Train Loss: tensor(0.7011) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(1.2822) Train Accuracy: 0.6428571428571429 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.5745) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(1.0557) Train Accuracy: 0.6785714285714286 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(0.3969) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.3\n","Epoch: 5 Train Loss: tensor(0.2448) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.6\n","Epoch: 6 Train Loss: tensor(0.3260) Train Accuracy: 0.8928571428571429 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(0.3012) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 8 Train Loss: tensor(0.1748) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 9 Train Loss: tensor(0.0521) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.6\n","Epoch: 10 Train Loss: tensor(0.0130) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 11 Train Loss: tensor(0.0237) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 12 Train Loss: tensor(0.0545) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 13 Train Loss: tensor(0.0727) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 14 Train Loss: tensor(0.0528) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 15 Train Loss: tensor(0.0226) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 16 Train Loss: tensor(0.0075) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(0.0028) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(0.0020) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 19 Train Loss: tensor(0.0027) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 20 Train Loss: tensor(0.0042) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 21 Train Loss: tensor(0.0062) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 22 Train Loss: tensor(0.0079) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 23 Train Loss: tensor(0.0084) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 24 Train Loss: tensor(0.0076) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 25 Train Loss: tensor(0.0059) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 26 Train Loss: tensor(0.0042) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 27 Train Loss: tensor(0.0028) Train Accuracy: 1.0 Test Accuracy: 0.6\n","Epoch: 28 Train Loss: tensor(0.0018) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 29 Train Loss: tensor(0.0012) Train Accuracy: 1.0 Test Accuracy: 0.4\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ef7WsfcyvtHg"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}