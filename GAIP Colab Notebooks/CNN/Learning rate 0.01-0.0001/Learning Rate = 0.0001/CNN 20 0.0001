{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686988522370,"user_tz":-330,"elapsed":4252,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"f44be5e0-1231-491a-ce50-46e98c45e5f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}],"source":["!pip install torchview"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"HDHc7dfUaCOk","executionInfo":{"status":"ok","timestamp":1686988527438,"user_tz":-330,"elapsed":5076,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2IQEuYGeaPxx","executionInfo":{"status":"ok","timestamp":1686988527440,"user_tz":-330,"elapsed":21,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"2373d945-33ac-4901-c780-8d4f0586dd9a"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686988572662,"user_tz":-330,"elapsed":45238,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"0ddcc715-b393-4d33-87d5-5b81d5f7bc2f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"ETZzsz931OMi","executionInfo":{"status":"ok","timestamp":1686988572663,"user_tz":-330,"elapsed":12,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"e15qznp2d5Kp","executionInfo":{"status":"ok","timestamp":1686988572663,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"6nzgq46V1Tbx","executionInfo":{"status":"ok","timestamp":1686988572664,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["num_epochs=20\n","learning_rate=0.0001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"OORJMQUTBv-f","executionInfo":{"status":"ok","timestamp":1686988572664,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"CQTXemq0B0wy","executionInfo":{"status":"ok","timestamp":1686988574058,"user_tz":-330,"elapsed":1403,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"U93M2c6OB89b","executionInfo":{"status":"ok","timestamp":1686988574059,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"df09a4a9-1023-4856-ecd0-21b579de32ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"9CC7Vb5xCcO-","executionInfo":{"status":"ok","timestamp":1686988574060,"user_tz":-330,"elapsed":8,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"08e948e3-85d3-4692-a9d4-729c3f96e0cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"rsAJ3HKVDvX4","executionInfo":{"status":"ok","timestamp":1686988578787,"user_tz":-330,"elapsed":4731,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"1v5Tym4EDvxJ","executionInfo":{"status":"ok","timestamp":1686988714632,"user_tz":-330,"elapsed":135867,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"79f38969-0297-428d-b925-7015dd262ede"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(2.3130) Train Accuracy: 0.46774193548387094 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(1.4982) Train Accuracy: 0.6169354838709677 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.7229) Train Accuracy: 0.8064516129032258 Test Accuracy: 0.8\n","Epoch: 3 Train Loss: tensor(0.4416) Train Accuracy: 0.8790322580645161 Test Accuracy: 0.75\n","Epoch: 4 Train Loss: tensor(0.2914) Train Accuracy: 0.8951612903225806 Test Accuracy: 0.75\n","Epoch: 5 Train Loss: tensor(0.3782) Train Accuracy: 0.8830645161290323 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(0.1542) Train Accuracy: 0.9354838709677419 Test Accuracy: 0.8\n","Epoch: 7 Train Loss: tensor(0.2236) Train Accuracy: 0.9193548387096774 Test Accuracy: 0.85\n","Epoch: 8 Train Loss: tensor(0.0796) Train Accuracy: 0.9637096774193549 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(0.1146) Train Accuracy: 0.9596774193548387 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(0.0401) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.85\n","Epoch: 11 Train Loss: tensor(0.0689) Train Accuracy: 0.9637096774193549 Test Accuracy: 0.85\n","Epoch: 12 Train Loss: tensor(0.0285) Train Accuracy: 0.9879032258064516 Test Accuracy: 0.8\n","Epoch: 13 Train Loss: tensor(0.0547) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(0.0252) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(0.0339) Train Accuracy: 0.9879032258064516 Test Accuracy: 0.85\n","Epoch: 16 Train Loss: tensor(0.0181) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.0134) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.0145) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 19 Train Loss: tensor(0.0067) Train Accuracy: 1.0 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"MeDbhMIGSTYG","executionInfo":{"status":"ok","timestamp":1686988714632,"user_tz":-330,"elapsed":19,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"zI5niO7aSWwO","executionInfo":{"status":"ok","timestamp":1686988715732,"user_tz":-330,"elapsed":1104,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"YMjGldWQSsGz","executionInfo":{"status":"ok","timestamp":1686988715733,"user_tz":-330,"elapsed":16,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8d68d021-8af2-452d-e4b0-792ea48c1522"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"BrN8lM8nSs47","executionInfo":{"status":"ok","timestamp":1686988715734,"user_tz":-330,"elapsed":13,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6dbe5a34-7a8d-4bac-821d-af3362ded233"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"_Y5T9jogSunn","executionInfo":{"status":"ok","timestamp":1686988715735,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"lcEHXfEiSwPR","executionInfo":{"status":"ok","timestamp":1686988816546,"user_tz":-330,"elapsed":100820,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"361ae2a7-7570-4b0e-c0b5-f328d21919bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(1.2810) Train Accuracy: 0.5819672131147541 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(0.8022) Train Accuracy: 0.7377049180327869 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(0.5538) Train Accuracy: 0.8032786885245902 Test Accuracy: 0.85\n","Epoch: 3 Train Loss: tensor(0.3171) Train Accuracy: 0.8811475409836066 Test Accuracy: 0.8\n","Epoch: 4 Train Loss: tensor(0.3640) Train Accuracy: 0.860655737704918 Test Accuracy: 0.75\n","Epoch: 5 Train Loss: tensor(0.2367) Train Accuracy: 0.9262295081967213 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(0.1095) Train Accuracy: 0.9508196721311475 Test Accuracy: 0.85\n","Epoch: 7 Train Loss: tensor(0.0900) Train Accuracy: 0.9549180327868853 Test Accuracy: 0.9\n","Epoch: 8 Train Loss: tensor(0.0767) Train Accuracy: 0.9631147540983607 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.0295) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 10 Train Loss: tensor(0.0307) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.85\n","Epoch: 11 Train Loss: tensor(0.0183) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.9\n","Epoch: 12 Train Loss: tensor(0.0198) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(0.0123) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(0.0115) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(0.0098) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.0090) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.0081) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.0073) Train Accuracy: 1.0 Test Accuracy: 0.95\n","Epoch: 19 Train Loss: tensor(0.0073) Train Accuracy: 1.0 Test Accuracy: 0.95\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"cajwucXI9k_A","executionInfo":{"status":"ok","timestamp":1686988816548,"user_tz":-330,"elapsed":9,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"-Y9EE7rE9pIE","executionInfo":{"status":"ok","timestamp":1686988817099,"user_tz":-330,"elapsed":558,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"NxaTYA2Y95Hx","executionInfo":{"status":"ok","timestamp":1686988817100,"user_tz":-330,"elapsed":12,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"478e72e2-6598-4ff5-877d-c35dd17ebe95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"xUfwtdas-A6L","executionInfo":{"status":"ok","timestamp":1686988817101,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"13e50dfa-31d5-4338-d20f-bf8888bdc24b"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"cbcuCJOu-cnm","executionInfo":{"status":"ok","timestamp":1686988817102,"user_tz":-330,"elapsed":8,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"C0MbmMpG-iNw","executionInfo":{"status":"ok","timestamp":1686988839141,"user_tz":-330,"elapsed":22046,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"cc2eba72-e51d-493b-833d-9831453a87de"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.8786) Train Accuracy: 0.39285714285714285 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(4.5025) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(1.7514) Train Accuracy: 0.5892857142857143 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(0.6734) Train Accuracy: 0.7321428571428571 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(1.9255) Train Accuracy: 0.5178571428571429 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(1.2965) Train Accuracy: 0.6607142857142857 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(0.5091) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(0.4778) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.4\n","Epoch: 8 Train Loss: tensor(0.7084) Train Accuracy: 0.8571428571428571 Test Accuracy: 0.5\n","Epoch: 9 Train Loss: tensor(0.8124) Train Accuracy: 0.8214285714285714 Test Accuracy: 0.4\n","Epoch: 10 Train Loss: tensor(0.6968) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.3\n","Epoch: 11 Train Loss: tensor(0.4433) Train Accuracy: 0.875 Test Accuracy: 0.4\n","Epoch: 12 Train Loss: tensor(0.2003) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.4\n","Epoch: 13 Train Loss: tensor(0.0770) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 14 Train Loss: tensor(0.0777) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 15 Train Loss: tensor(0.1454) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.5\n","Epoch: 16 Train Loss: tensor(0.2016) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(0.1726) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(0.0876) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.4\n","Epoch: 19 Train Loss: tensor(0.0289) Train Accuracy: 1.0 Test Accuracy: 0.4\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"ef7WsfcyvtHg","executionInfo":{"status":"ok","timestamp":1686988839142,"user_tz":-330,"elapsed":47,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}}},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}