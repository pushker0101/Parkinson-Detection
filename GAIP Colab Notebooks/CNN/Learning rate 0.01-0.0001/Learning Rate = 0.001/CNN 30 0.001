{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686977405611,"user_tz":-330,"elapsed":3690,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"c99635ae-d151-4c4f-fee6-6245e184b7cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchview in /usr/local/lib/python3.10/dist-packages (0.2.6)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1686977405612,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"1183b642-dc47-4e79-f0cb-e5e05368949e"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977408616,"user_tz":-330,"elapsed":3011,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"1a96c8bc-7dba-4d1b-c834-fce5589a2bdb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=30\n","learning_rate=0.001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1686977408618,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"6fa8596c-77df-4663-ea07-132f7cac078d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1686977408618,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"05bc38c3-1bd7-4188-e33d-58d0572c2d30"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":152225,"status":"ok","timestamp":1686977560833,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"1v5Tym4EDvxJ","outputId":"48fca859-b2f0-4aca-fe02-ca5d68a293a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(26.0272) Train Accuracy: 0.532258064516129 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(7.7170) Train Accuracy: 0.6653225806451613 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(3.7973) Train Accuracy: 0.8064516129032258 Test Accuracy: 0.65\n","Epoch: 3 Train Loss: tensor(3.5741) Train Accuracy: 0.8669354838709677 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(2.0576) Train Accuracy: 0.8951612903225806 Test Accuracy: 0.65\n","Epoch: 5 Train Loss: tensor(1.2418) Train Accuracy: 0.9274193548387096 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(0.7720) Train Accuracy: 0.9435483870967742 Test Accuracy: 0.65\n","Epoch: 7 Train Loss: tensor(0.4997) Train Accuracy: 0.9475806451612904 Test Accuracy: 0.7\n","Epoch: 8 Train Loss: tensor(0.2940) Train Accuracy: 0.967741935483871 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.5067) Train Accuracy: 0.9556451612903226 Test Accuracy: 0.7\n","Epoch: 10 Train Loss: tensor(0.5188) Train Accuracy: 0.9314516129032258 Test Accuracy: 0.75\n","Epoch: 11 Train Loss: tensor(0.1528) Train Accuracy: 0.967741935483871 Test Accuracy: 0.85\n","Epoch: 12 Train Loss: tensor(0.2353) Train Accuracy: 0.9637096774193549 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(0.2513) Train Accuracy: 0.9717741935483871 Test Accuracy: 0.85\n","Epoch: 14 Train Loss: tensor(0.0161) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n","Epoch: 15 Train Loss: tensor(2.2570e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 16 Train Loss: tensor(0.0264) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.85\n","Epoch: 17 Train Loss: tensor(0.0222) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.85\n","Epoch: 18 Train Loss: tensor(4.8948e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 19 Train Loss: tensor(6.5128e-07) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 20 Train Loss: tensor(1.9708e-08) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 21 Train Loss: tensor(1.1949e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 22 Train Loss: tensor(1.6055e-07) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 23 Train Loss: tensor(1.1825e-07) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 24 Train Loss: tensor(3.9702e-07) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 25 Train Loss: tensor(3.2089e-05) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 26 Train Loss: tensor(1.4420e-08) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 27 Train Loss: tensor(1.3426e-05) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 28 Train Loss: tensor(2.6918e-08) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 29 Train Loss: tensor(2.5764e-07) Train Accuracy: 1.0 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977560834,"user_tz":-330,"elapsed":14,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"ae9a6a54-7335-4c28-e241-370a3a7484bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977560835,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"5baf3462-ebba-4fbb-9a43-73780754ebb1"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977665182,"user_tz":-330,"elapsed":104354,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"453894f5-cebe-4524-ca03-7d23805f0a09"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(12.1065) Train Accuracy: 0.6352459016393442 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(8.5868) Train Accuracy: 0.7172131147540983 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(5.3451) Train Accuracy: 0.8073770491803278 Test Accuracy: 0.75\n","Epoch: 3 Train Loss: tensor(2.9975) Train Accuracy: 0.8073770491803278 Test Accuracy: 0.85\n","Epoch: 4 Train Loss: tensor(1.9867) Train Accuracy: 0.8852459016393442 Test Accuracy: 0.65\n","Epoch: 5 Train Loss: tensor(1.9138) Train Accuracy: 0.889344262295082 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(0.7817) Train Accuracy: 0.930327868852459 Test Accuracy: 0.75\n","Epoch: 7 Train Loss: tensor(0.2860) Train Accuracy: 0.9549180327868853 Test Accuracy: 0.9\n","Epoch: 8 Train Loss: tensor(0.4253) Train Accuracy: 0.9508196721311475 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.1043) Train Accuracy: 0.9877049180327869 Test Accuracy: 0.8\n","Epoch: 10 Train Loss: tensor(0.0763) Train Accuracy: 0.9795081967213115 Test Accuracy: 0.8\n","Epoch: 11 Train Loss: tensor(0.0010) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 12 Train Loss: tensor(0.0026) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 13 Train Loss: tensor(0.0004) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 14 Train Loss: tensor(0.0002) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 15 Train Loss: tensor(5.7629e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 16 Train Loss: tensor(3.1010e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 17 Train Loss: tensor(4.3643e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 18 Train Loss: tensor(0.0008) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 19 Train Loss: tensor(3.4348e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 20 Train Loss: tensor(1.1164e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 21 Train Loss: tensor(1.1337e-05) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 22 Train Loss: tensor(5.0284e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 23 Train Loss: tensor(5.6138e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 24 Train Loss: tensor(6.2075e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 25 Train Loss: tensor(1.9276e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 26 Train Loss: tensor(2.6068e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 27 Train Loss: tensor(4.2076e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 28 Train Loss: tensor(3.7571e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n","Epoch: 29 Train Loss: tensor(2.2931e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977665183,"user_tz":-330,"elapsed":12,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"883fbbe3-dc55-4383-8578-e5b04830ee56"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977665183,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"c7ef6c21-a415-425b-ad29-cdbbd2cfaa86"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686977401923,"user_tz":-330,"elapsed":54595,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"4c7f33ad-5648-4aab-aefa-7762c143556c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.8993) Train Accuracy: 0.30357142857142855 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(36.9934) Train Accuracy: 0.5535714285714286 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(11.8557) Train Accuracy: 0.6607142857142857 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(4.2903) Train Accuracy: 0.75 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(9.6265) Train Accuracy: 0.5714285714285714 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(1.5650) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(1.0762) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.4\n","Epoch: 7 Train Loss: tensor(1.7476) Train Accuracy: 0.8928571428571429 Test Accuracy: 0.3\n","Epoch: 8 Train Loss: tensor(1.2849) Train Accuracy: 0.8928571428571429 Test Accuracy: 0.3\n","Epoch: 9 Train Loss: tensor(0.2929) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.3\n","Epoch: 10 Train Loss: tensor(0.0430) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 11 Train Loss: tensor(0.3378) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.3\n","Epoch: 12 Train Loss: tensor(0.3725) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.3\n","Epoch: 13 Train Loss: tensor(0.1185) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.1\n","Epoch: 14 Train Loss: tensor(0.0919) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.1\n","Epoch: 15 Train Loss: tensor(0.0121) Train Accuracy: 1.0 Test Accuracy: 0.1\n","Epoch: 16 Train Loss: tensor(7.0886e-07) Train Accuracy: 1.0 Test Accuracy: 0.2\n","Epoch: 17 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.2\n","Epoch: 18 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.2\n","Epoch: 19 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.2\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}