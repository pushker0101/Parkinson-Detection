{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686976378910,"user_tz":-330,"elapsed":5785,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"6b2a573d-4ad9-4f61-cf4a-60207d186e9f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1686976383886,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"2IQEuYGeaPxx","outputId":"93af8aa8-70e8-4f2e-bcac-bc5df131fec9"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976404434,"user_tz":-330,"elapsed":20554,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"afdb350b-62c1-4ef9-b43e-0bfc776798ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=20\n","learning_rate=0.001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1686976406679,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"U93M2c6OB89b","outputId":"a511bcfb-1959-45f8-ef94-5f98edf27e5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1686976406680,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"9CC7Vb5xCcO-","outputId":"57fd01dd-7526-4786-95bb-a46c8f87710d"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":159459,"status":"ok","timestamp":1686976570331,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"},"user_tz":-330},"id":"1v5Tym4EDvxJ","outputId":"05a1cf7f-95fc-430d-8cc2-9d779e8be98f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(22.0762) Train Accuracy: 0.5282258064516129 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(22.2100) Train Accuracy: 0.5725806451612904 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(12.6513) Train Accuracy: 0.6612903225806451 Test Accuracy: 0.6\n","Epoch: 3 Train Loss: tensor(6.7495) Train Accuracy: 0.7459677419354839 Test Accuracy: 0.65\n","Epoch: 4 Train Loss: tensor(4.0136) Train Accuracy: 0.8225806451612904 Test Accuracy: 0.7\n","Epoch: 5 Train Loss: tensor(2.2818) Train Accuracy: 0.8911290322580645 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(1.4626) Train Accuracy: 0.9233870967741935 Test Accuracy: 0.7\n","Epoch: 7 Train Loss: tensor(1.5577) Train Accuracy: 0.9153225806451613 Test Accuracy: 0.75\n","Epoch: 8 Train Loss: tensor(0.7178) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.2600) Train Accuracy: 0.9717741935483871 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(0.1497) Train Accuracy: 0.9879032258064516 Test Accuracy: 0.9\n","Epoch: 11 Train Loss: tensor(0.0340) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.9\n","Epoch: 12 Train Loss: tensor(0.0214) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(0.0349) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(1.1654e-05) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 15 Train Loss: tensor(1.8435e-05) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(0.0011) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(0.0096) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(9.5831e-06) Train Accuracy: 1.0 Test Accuracy: 0.95\n","Epoch: 19 Train Loss: tensor(4.3933e-07) Train Accuracy: 1.0 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976571409,"user_tz":-330,"elapsed":7,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"81b77cb5-0f2c-4411-e972-384769e40500"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976571410,"user_tz":-330,"elapsed":6,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"4fa0b536-a068-4cf2-d205-ee1abaa2f75d"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976706456,"user_tz":-330,"elapsed":135049,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"17a705bb-1bd0-49c8-93ca-e82612cc50d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(14.4409) Train Accuracy: 0.6475409836065574 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(12.1660) Train Accuracy: 0.6762295081967213 Test Accuracy: 0.75\n","Epoch: 2 Train Loss: tensor(5.5583) Train Accuracy: 0.7868852459016393 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(3.6430) Train Accuracy: 0.8278688524590164 Test Accuracy: 0.8\n","Epoch: 4 Train Loss: tensor(2.6393) Train Accuracy: 0.889344262295082 Test Accuracy: 0.85\n","Epoch: 5 Train Loss: tensor(0.8208) Train Accuracy: 0.9262295081967213 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(0.2891) Train Accuracy: 0.9549180327868853 Test Accuracy: 0.8\n","Epoch: 7 Train Loss: tensor(0.1631) Train Accuracy: 0.9754098360655737 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.1420) Train Accuracy: 0.9713114754098361 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(0.0256) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.8\n","Epoch: 10 Train Loss: tensor(0.0275) Train Accuracy: 0.9918032786885246 Test Accuracy: 0.8\n","Epoch: 11 Train Loss: tensor(3.7605e-06) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 12 Train Loss: tensor(0.0014) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 13 Train Loss: tensor(0.0005) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 14 Train Loss: tensor(8.4183e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 15 Train Loss: tensor(3.4509e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 16 Train Loss: tensor(4.1043e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 17 Train Loss: tensor(7.2321e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 18 Train Loss: tensor(1.3053e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 19 Train Loss: tensor(8.5787e-06) Train Accuracy: 1.0 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976707681,"user_tz":-330,"elapsed":8,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"2e5d055d-c123-42bb-f62a-a0c79330b44d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976707681,"user_tz":-330,"elapsed":5,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"0b541366-88c4-496f-fecf-9e9297e609ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686976743530,"user_tz":-330,"elapsed":35852,"user":{"displayName":"Pushker Jain","userId":"14409710878861093841"}},"outputId":"53aced38-2534-4df0-e39f-506ed6e9a087"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.7095) Train Accuracy: 0.5892857142857143 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(12.0277) Train Accuracy: 0.5714285714285714 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(9.4376) Train Accuracy: 0.7678571428571429 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(11.5326) Train Accuracy: 0.7142857142857143 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(5.0279) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.4\n","Epoch: 5 Train Loss: tensor(1.4016) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(2.8440) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(2.3386) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.5\n","Epoch: 8 Train Loss: tensor(0.1269) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.4\n","Epoch: 9 Train Loss: tensor(2.9802e-08) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 10 Train Loss: tensor(0.0231) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 11 Train Loss: tensor(0.2095) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.4\n","Epoch: 12 Train Loss: tensor(0.5201) Train Accuracy: 0.9107142857142857 Test Accuracy: 0.3\n","Epoch: 13 Train Loss: tensor(0.0226) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.3\n","Epoch: 14 Train Loss: tensor(2.9802e-08) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 15 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 16 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 17 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 18 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 19 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}