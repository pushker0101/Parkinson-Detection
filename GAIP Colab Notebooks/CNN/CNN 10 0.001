{"cells":[{"cell_type":"code","source":["!pip install torchview"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QyoFRiShY9WG","executionInfo":{"status":"ok","timestamp":1686771080333,"user_tz":-480,"elapsed":5086,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"3de9a952-6fd3-4a70-bd46-ab849ab6e329"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torchview\n","  Downloading torchview-0.2.6-py3-none-any.whl (25 kB)\n","Installing collected packages: torchview\n","Successfully installed torchview-0.2.6\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HDHc7dfUaCOk"},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1686770496162,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"},"user_tz":-480},"id":"2IQEuYGeaPxx","outputId":"4b9d3709-6594-4f7d-d75d-05d863999d11"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686770524602,"user_tz":-480,"elapsed":26802,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"43734497-e932-4250-ce03-5713a6708a0a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETZzsz931OMi"},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e15qznp2d5Kp"},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=10\n","learning_rate=0.001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1686770752973,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"},"user_tz":-480},"id":"U93M2c6OB89b","outputId":"ab12d66a-98f8-4fbf-e99b-ee7d2da1f4a8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":700,"status":"ok","timestamp":1686770758834,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"},"user_tz":-480},"id":"9CC7Vb5xCcO-","outputId":"a7ad62b1-b804-430e-8bc4-19f1a39b2ea3"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","source":["import torchvision\n","from torchview import draw_graph\n","\n","model_graph = draw_graph(\n","    ConvNet(), input_size=(2, 128),\n","    graph_name='MLP',\n","    hide_inner_tensors=False,\n","    hide_module_functions=False,\n",")\n","\n","model_graph.visual_graph"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"qq4pR9eRX0vq","executionInfo":{"status":"ok","timestamp":1686771236556,"user_tz":-480,"elapsed":546,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"0f50db27-4a02-41d8-ce2c-00332b3f0561"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/svg+xml":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: model Pages: 1 -->\n<svg width=\"235pt\" height=\"864pt\"\n viewBox=\"0.00 0.00 235.23 864.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1.12 1.12) rotate(0) translate(4 962)\">\n<title>model</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-962 259,-962 259,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<polygon fill=\"lightyellow\" stroke=\"transparent\" points=\"222.5,-958 32.5,-958 32.5,-926 222.5,-926 222.5,-958\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"32.5,-926 32.5,-958 115.5,-958 115.5,-926 32.5,-926\"/>\n<text text-anchor=\"start\" x=\"37.5\" y=\"-945\" font-family=\"Linux libertine\" font-size=\"10.00\">input&#45;tensor</text>\n<text text-anchor=\"start\" x=\"52.5\" y=\"-934\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:0</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"115.5,-926 115.5,-958 222.5,-958 222.5,-926 115.5,-926\"/>\n<text text-anchor=\"start\" x=\"120.5\" y=\"-939.5\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 3, 150, 150)</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"243,-890 12,-890 12,-848 243,-848 243,-890\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"12.5,-848 12.5,-890 65.5,-890 65.5,-848 12.5,-848\"/>\n<text text-anchor=\"start\" x=\"20.5\" y=\"-872\" font-family=\"Linux libertine\" font-size=\"10.00\">Conv2d</text>\n<text text-anchor=\"start\" x=\"17.5\" y=\"-861\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"65.5,-869 65.5,-890 124.5,-890 124.5,-869 65.5,-869\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-877\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"124.5,-869 124.5,-890 243.5,-890 243.5,-869 124.5,-869\"/>\n<text text-anchor=\"start\" x=\"132.5\" y=\"-877\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 3, 150, 150) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"65.5,-848 65.5,-869 124.5,-869 124.5,-848 65.5,-848\"/>\n<text text-anchor=\"start\" x=\"70.5\" y=\"-856\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"124.5,-848 124.5,-869 243.5,-869 243.5,-848 124.5,-848\"/>\n<text text-anchor=\"start\" x=\"129.5\" y=\"-856\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-925.94C127.5,-918.45 127.5,-909.12 127.5,-900.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-900.16 127.5,-890.16 124,-900.16 131,-900.16\"/>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"255,-812 0,-812 0,-770 255,-770 255,-812\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"0.5,-770 0.5,-812 77.5,-812 77.5,-770 0.5,-770\"/>\n<text text-anchor=\"start\" x=\"5.5\" y=\"-794\" font-family=\"Linux libertine\" font-size=\"10.00\">BatchNorm2d</text>\n<text text-anchor=\"start\" x=\"17.5\" y=\"-783\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"77.5,-791 77.5,-812 136.5,-812 136.5,-791 77.5,-791\"/>\n<text text-anchor=\"start\" x=\"88.5\" y=\"-799\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"136.5,-791 136.5,-812 255.5,-812 255.5,-791 136.5,-791\"/>\n<text text-anchor=\"start\" x=\"141.5\" y=\"-799\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"77.5,-770 77.5,-791 136.5,-791 136.5,-770 77.5,-770\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-778\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"136.5,-770 136.5,-791 255.5,-791 255.5,-770 136.5,-770\"/>\n<text text-anchor=\"start\" x=\"141.5\" y=\"-778\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-847.63C127.5,-839.82 127.5,-830.73 127.5,-822.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-822.16 127.5,-812.16 124,-822.16 131,-822.16\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"243,-734 12,-734 12,-692 243,-692 243,-734\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"12.5,-692 12.5,-734 65.5,-734 65.5,-692 12.5,-692\"/>\n<text text-anchor=\"start\" x=\"26.5\" y=\"-716\" font-family=\"Linux libertine\" font-size=\"10.00\">ReLU</text>\n<text text-anchor=\"start\" x=\"17.5\" y=\"-705\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"65.5,-713 65.5,-734 124.5,-734 124.5,-713 65.5,-713\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-721\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"124.5,-713 124.5,-734 243.5,-734 243.5,-713 124.5,-713\"/>\n<text text-anchor=\"start\" x=\"129.5\" y=\"-721\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"65.5,-692 65.5,-713 124.5,-713 124.5,-692 65.5,-692\"/>\n<text text-anchor=\"start\" x=\"70.5\" y=\"-700\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"124.5,-692 124.5,-713 243.5,-713 243.5,-692 124.5,-692\"/>\n<text text-anchor=\"start\" x=\"129.5\" y=\"-700\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-769.63C127.5,-761.82 127.5,-752.73 127.5,-744.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-744.16 127.5,-734.16 124,-744.16 131,-744.16\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"249,-656 6,-656 6,-614 249,-614 249,-656\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"6.5,-614 6.5,-656 71.5,-656 71.5,-614 6.5,-614\"/>\n<text text-anchor=\"start\" x=\"11.5\" y=\"-638\" font-family=\"Linux libertine\" font-size=\"10.00\">MaxPool2d</text>\n<text text-anchor=\"start\" x=\"17.5\" y=\"-627\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-635 71.5,-656 130.5,-656 130.5,-635 71.5,-635\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-643\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-635 130.5,-656 249.5,-656 249.5,-635 130.5,-635\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-643\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 150, 150) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-614 71.5,-635 130.5,-635 130.5,-614 71.5,-614\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-622\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-614 130.5,-635 249.5,-635 249.5,-614 130.5,-614\"/>\n<text text-anchor=\"start\" x=\"141.5\" y=\"-622\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 75, 75) </text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-691.63C127.5,-683.82 127.5,-674.73 127.5,-666.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-666.16 127.5,-656.16 124,-666.16 131,-666.16\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"237,-578 18,-578 18,-536 237,-536 237,-578\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"18.5,-536 18.5,-578 71.5,-578 71.5,-536 18.5,-536\"/>\n<text text-anchor=\"start\" x=\"26.5\" y=\"-560\" font-family=\"Linux libertine\" font-size=\"10.00\">Conv2d</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-549\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-557 71.5,-578 130.5,-578 130.5,-557 71.5,-557\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-565\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-557 130.5,-578 237.5,-578 237.5,-557 130.5,-557\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-565\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 12, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-536 71.5,-557 130.5,-557 130.5,-536 71.5,-536\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-544\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-536 130.5,-557 237.5,-557 237.5,-536 130.5,-536\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-544\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 20, 75, 75) </text>\n</g>\n<!-- 4&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>4&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-613.63C127.5,-605.82 127.5,-596.73 127.5,-588.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-588.16 127.5,-578.16 124,-588.16 131,-588.16\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"237,-500 18,-500 18,-458 237,-458 237,-500\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"18.5,-458 18.5,-500 71.5,-500 71.5,-458 18.5,-458\"/>\n<text text-anchor=\"start\" x=\"32.5\" y=\"-482\" font-family=\"Linux libertine\" font-size=\"10.00\">ReLU</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-471\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-479 71.5,-500 130.5,-500 130.5,-479 71.5,-479\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-487\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-479 130.5,-500 237.5,-500 237.5,-479 130.5,-479\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-487\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 20, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-458 71.5,-479 130.5,-479 130.5,-458 71.5,-458\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-466\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-458 130.5,-479 237.5,-479 237.5,-458 130.5,-458\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-466\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 20, 75, 75) </text>\n</g>\n<!-- 5&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>5&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-535.63C127.5,-527.82 127.5,-518.73 127.5,-510.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-510.16 127.5,-500.16 124,-510.16 131,-510.16\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"237,-422 18,-422 18,-380 237,-380 237,-422\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"18.5,-380 18.5,-422 71.5,-422 71.5,-380 18.5,-380\"/>\n<text text-anchor=\"start\" x=\"26.5\" y=\"-404\" font-family=\"Linux libertine\" font-size=\"10.00\">Conv2d</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-393\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-401 71.5,-422 130.5,-422 130.5,-401 71.5,-401\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-409\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-401 130.5,-422 237.5,-422 237.5,-401 130.5,-401\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-409\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 20, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-380 71.5,-401 130.5,-401 130.5,-380 71.5,-380\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-388\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-380 130.5,-401 237.5,-401 237.5,-380 130.5,-380\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-388\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-457.63C127.5,-449.82 127.5,-440.73 127.5,-432.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-432.16 127.5,-422.16 124,-432.16 131,-432.16\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"249,-344 6,-344 6,-302 249,-302 249,-344\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"6.5,-302 6.5,-344 83.5,-344 83.5,-302 6.5,-302\"/>\n<text text-anchor=\"start\" x=\"11.5\" y=\"-326\" font-family=\"Linux libertine\" font-size=\"10.00\">BatchNorm2d</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-315\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"83.5,-323 83.5,-344 142.5,-344 142.5,-323 83.5,-323\"/>\n<text text-anchor=\"start\" x=\"94.5\" y=\"-331\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"142.5,-323 142.5,-344 249.5,-344 249.5,-323 142.5,-323\"/>\n<text text-anchor=\"start\" x=\"147.5\" y=\"-331\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"83.5,-302 83.5,-323 142.5,-323 142.5,-302 83.5,-302\"/>\n<text text-anchor=\"start\" x=\"88.5\" y=\"-310\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"142.5,-302 142.5,-323 249.5,-323 249.5,-302 142.5,-302\"/>\n<text text-anchor=\"start\" x=\"147.5\" y=\"-310\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n</g>\n<!-- 7&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>7&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-379.63C127.5,-371.82 127.5,-362.73 127.5,-354.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-354.16 127.5,-344.16 124,-354.16 131,-354.16\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"237,-266 18,-266 18,-224 237,-224 237,-266\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"18.5,-224 18.5,-266 71.5,-266 71.5,-224 18.5,-224\"/>\n<text text-anchor=\"start\" x=\"32.5\" y=\"-248\" font-family=\"Linux libertine\" font-size=\"10.00\">ReLU</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-237\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-245 71.5,-266 130.5,-266 130.5,-245 71.5,-245\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-253\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-245 130.5,-266 237.5,-266 237.5,-245 130.5,-245\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-253\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-224 71.5,-245 130.5,-245 130.5,-224 71.5,-224\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-232\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-224 130.5,-245 237.5,-245 237.5,-224 130.5,-224\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-232\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n</g>\n<!-- 8&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>8&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-301.63C127.5,-293.82 127.5,-284.73 127.5,-276.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-276.16 127.5,-266.16 124,-276.16 131,-276.16\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<polygon fill=\"aliceblue\" stroke=\"transparent\" points=\"237,-188 18,-188 18,-146 237,-146 237,-188\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"18.5,-146 18.5,-188 71.5,-188 71.5,-146 18.5,-146\"/>\n<text text-anchor=\"start\" x=\"32.5\" y=\"-170\" font-family=\"Linux libertine\" font-size=\"10.00\">view</text>\n<text text-anchor=\"start\" x=\"23.5\" y=\"-159\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-167 71.5,-188 130.5,-188 130.5,-167 71.5,-167\"/>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-175\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-167 130.5,-188 237.5,-188 237.5,-167 130.5,-167\"/>\n<text text-anchor=\"start\" x=\"135.5\" y=\"-175\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 32, 75, 75) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"71.5,-146 71.5,-167 130.5,-167 130.5,-146 71.5,-146\"/>\n<text text-anchor=\"start\" x=\"76.5\" y=\"-154\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"130.5,-146 130.5,-167 237.5,-167 237.5,-146 130.5,-146\"/>\n<text text-anchor=\"start\" x=\"147.5\" y=\"-154\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 180000) </text>\n</g>\n<!-- 9&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>9&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-223.63C127.5,-215.82 127.5,-206.73 127.5,-198.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-198.16 127.5,-188.16 124,-198.16 131,-198.16\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<polygon fill=\"#c1ffc1\" stroke=\"transparent\" points=\"225,-110 30,-110 30,-68 225,-68 225,-110\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"30.5,-68 30.5,-110 83.5,-110 83.5,-68 30.5,-68\"/>\n<text text-anchor=\"start\" x=\"38.5\" y=\"-92\" font-family=\"Linux libertine\" font-size=\"10.00\">Linear</text>\n<text text-anchor=\"start\" x=\"35.5\" y=\"-81\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:1</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"83.5,-89 83.5,-110 142.5,-110 142.5,-89 83.5,-89\"/>\n<text text-anchor=\"start\" x=\"94.5\" y=\"-97\" font-family=\"Linux libertine\" font-size=\"10.00\">input:</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"142.5,-89 142.5,-110 225.5,-110 225.5,-89 142.5,-89\"/>\n<text text-anchor=\"start\" x=\"147.5\" y=\"-97\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 180000) </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"83.5,-68 83.5,-89 142.5,-89 142.5,-68 83.5,-68\"/>\n<text text-anchor=\"start\" x=\"88.5\" y=\"-76\" font-family=\"Linux libertine\" font-size=\"10.00\">output: </text>\n<polygon fill=\"none\" stroke=\"black\" points=\"142.5,-68 142.5,-89 225.5,-89 225.5,-68 142.5,-68\"/>\n<text text-anchor=\"start\" x=\"162.5\" y=\"-76\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 2) </text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-145.63C127.5,-137.82 127.5,-128.73 127.5,-120.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-120.16 127.5,-110.16 124,-120.16 131,-120.16\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<polygon fill=\"lightyellow\" stroke=\"transparent\" points=\"195.5,-32 59.5,-32 59.5,0 195.5,0 195.5,-32\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"59.5,0 59.5,-32 148.5,-32 148.5,0 59.5,0\"/>\n<text text-anchor=\"start\" x=\"64.5\" y=\"-19\" font-family=\"Linux libertine\" font-size=\"10.00\">output&#45;tensor</text>\n<text text-anchor=\"start\" x=\"82.5\" y=\"-8\" font-family=\"Linux libertine\" font-size=\"10.00\">depth:0</text>\n<polygon fill=\"none\" stroke=\"black\" points=\"148.5,0 148.5,-32 195.5,-32 195.5,0 148.5,0\"/>\n<text text-anchor=\"start\" x=\"153.5\" y=\"-13.5\" font-family=\"Linux libertine\" font-size=\"10.00\">(1, 2)</text>\n</g>\n<!-- 11&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>11&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M127.5,-67.84C127.5,-59.89 127.5,-50.66 127.5,-42.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131,-42.24 127.5,-32.24 124,-42.24 131,-42.24\"/>\n</g>\n</g>\n</svg>\n","text/plain":["<graphviz.graphs.Digraph at 0x7f0f998df130>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":154465,"status":"ok","timestamp":1686639430076,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"1v5Tym4EDvxJ","outputId":"122d02a1-1994-43f7-ba21-7fca4b774484"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(20.0308) Train Accuracy: 0.5443548387096774 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(8.8304) Train Accuracy: 0.7379032258064516 Test Accuracy: 0.65\n","Epoch: 2 Train Loss: tensor(5.0751) Train Accuracy: 0.8588709677419355 Test Accuracy: 0.75\n","Epoch: 3 Train Loss: tensor(4.1866) Train Accuracy: 0.8387096774193549 Test Accuracy: 0.8\n","Epoch: 4 Train Loss: tensor(2.6536) Train Accuracy: 0.8991935483870968 Test Accuracy: 0.85\n","Epoch: 5 Train Loss: tensor(1.3749) Train Accuracy: 0.9354838709677419 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(1.1909) Train Accuracy: 0.9233870967741935 Test Accuracy: 0.85\n","Epoch: 7 Train Loss: tensor(1.1552) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.85\n","Epoch: 8 Train Loss: tensor(0.4331) Train Accuracy: 0.9556451612903226 Test Accuracy: 0.9\n","Epoch: 9 Train Loss: tensor(0.2582) Train Accuracy: 0.967741935483871 Test Accuracy: 0.85\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639431884,"user_tz":-480,"elapsed":27,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"06e19c77-fcc7-40fe-ca22-9cdce8693df5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639431885,"user_tz":-480,"elapsed":20,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"5e63d81d-3b69-405a-ac98-dfff70c7b3f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639578429,"user_tz":-480,"elapsed":146552,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"839ea375-6b0f-407b-f6af-ee3d58c16b95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(19.5320) Train Accuracy: 0.5614754098360656 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(15.9006) Train Accuracy: 0.6147540983606558 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(5.5370) Train Accuracy: 0.8155737704918032 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(3.3122) Train Accuracy: 0.8114754098360656 Test Accuracy: 0.65\n","Epoch: 4 Train Loss: tensor(2.9676) Train Accuracy: 0.8729508196721312 Test Accuracy: 0.75\n","Epoch: 5 Train Loss: tensor(0.8369) Train Accuracy: 0.930327868852459 Test Accuracy: 0.8\n","Epoch: 6 Train Loss: tensor(0.6634) Train Accuracy: 0.9426229508196722 Test Accuracy: 0.75\n","Epoch: 7 Train Loss: tensor(0.4985) Train Accuracy: 0.9467213114754098 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.1389) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(0.1115) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.8\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639579908,"user_tz":-480,"elapsed":32,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"48a28c0d-2bac-4083-a8a0-6a4be42e6488"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639579910,"user_tz":-480,"elapsed":24,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"59eca558-6c7e-43bd-e5f0-1cfca03a3ae3"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686639630177,"user_tz":-480,"elapsed":50276,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"a2302bf3-74da-4442-edf4-41cafec7589f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.6584) Train Accuracy: 0.625 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(4.6626) Train Accuracy: 0.7857142857142857 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(12.2451) Train Accuracy: 0.7321428571428571 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(4.0342) Train Accuracy: 0.8928571428571429 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(1.3561) Train Accuracy: 0.875 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(2.5383) Train Accuracy: 0.7857142857142857 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(0.0079) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(5.8919e-06) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 8 Train Loss: tensor(0.3284) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n","Epoch: 9 Train Loss: tensor(0.4690) Train Accuracy: 0.9642857142857143 Test Accuracy: 0.5\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}