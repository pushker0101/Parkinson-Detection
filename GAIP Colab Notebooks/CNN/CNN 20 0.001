{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"HDHc7dfUaCOk","executionInfo":{"status":"ok","timestamp":1686988576181,"user_tz":-480,"elapsed":5913,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}}},"outputs":[],"source":["#load libraries\n","import os\n","import numpy as np\n","import torch\n","import glob\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","from torch.utils.data import DataLoader\n","from torch.optim import Adam\n","from torch.autograd import Variable\n","import torchvision\n","import pathlib"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":273,"status":"ok","timestamp":1686988581690,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"},"user_tz":-480},"id":"2IQEuYGeaPxx","outputId":"6402d540-317e-45bd-f79d-aa390aeacf31"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n"]}],"source":["device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(device)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"mTqD3Y7rSokd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686988620811,"user_tz":-480,"elapsed":26675,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"2e5aaace-a0a4-435c-bece-ee83eb0f7fb4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"ETZzsz931OMi","executionInfo":{"status":"ok","timestamp":1686988627059,"user_tz":-480,"elapsed":278,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}}},"outputs":[],"source":["transformer=transforms.Compose([\n","    transforms.Resize((150,150)),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5])\n","])"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"e15qznp2d5Kp","executionInfo":{"status":"ok","timestamp":1686988628277,"user_tz":-480,"elapsed":1,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}}},"outputs":[],"source":["class ConvNet(nn.Module):\n","    def __init__(self,num_classes=2):\n","        super(ConvNet,self).__init__()\n","        #Input shape= (256,3,150,150)\n","\n","        self.conv1=nn.Conv2d(in_channels=3,out_channels=12,kernel_size=3,stride=1,padding=1)\n","        self.bn1=nn.BatchNorm2d(num_features=12)\n","        self.relu1=nn.ReLU()\n","        #Shape= (256,12,150,150)\n","\n","        self.pool=nn.MaxPool2d(kernel_size=2)\n","        #Reduce the image size by factor 2\n","        #Shape= (256,12,75,75)\n","\n","\n","        self.conv2=nn.Conv2d(in_channels=12,out_channels=20,kernel_size=3,stride=1,padding=1)\n","        self.relu2=nn.ReLU()\n","        #Shape= (256,20,75,75)\n","\n","        self.conv3=nn.Conv2d(in_channels=20,out_channels=32,kernel_size=3,stride=1,padding=1)\n","        self.bn3=nn.BatchNorm2d(num_features=32)\n","        self.relu3=nn.ReLU()\n","        #Shape= (256,32,75,75)\n","\n","        self.fc=nn.Linear(in_features=75 * 75 * 32,out_features=num_classes)\n","\n","\n","\n","    def forward(self,input):\n","        output=self.conv1(input)\n","        output=self.bn1(output)\n","        output=self.relu1(output)\n","\n","        output=self.pool(output)\n","\n","        output=self.conv2(output)\n","        output=self.relu2(output)\n","\n","        output=self.conv3(output)\n","        output=self.bn3(output)\n","        output=self.relu3(output)\n","\n","\n","            #Above output will be in matrix form, with shape (256,32,75,75)\n","\n","        output=output.view(-1,32*75*75)\n","\n","\n","        output=self.fc(output)\n","\n","        return output"]},{"cell_type":"code","source":["print(ConvNet())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yeiXKfq4dNzu","executionInfo":{"status":"ok","timestamp":1686990363825,"user_tz":-480,"elapsed":4,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"e7cfec13-79b7-427d-bc8f-8624a33a6123"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["ConvNet(\n","  (conv1): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (bn1): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu1): ReLU()\n","  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (conv2): Conv2d(12, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (relu2): ReLU()\n","  (conv3): Conv2d(20, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (bn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu3): ReLU()\n","  (fc): Linear(in_features=180000, out_features=2, bias=True)\n",")\n"]}]},{"cell_type":"code","source":["import torch\n","import torchvision.models as models\n","from torchsummary import summary\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model = models.resnet34().to(device)\n","summary(model, (3, 224, 224))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6eroxXAfWaqS","executionInfo":{"status":"ok","timestamp":1686991915470,"user_tz":-480,"elapsed":815,"user":{"displayName":"nishanth pilli","userId":"05455130348492834374"}},"outputId":"e2d57fda-1560-4298-bedb-f79871e8675a"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1         [-1, 64, 112, 112]           9,408\n","       BatchNorm2d-2         [-1, 64, 112, 112]             128\n","              ReLU-3         [-1, 64, 112, 112]               0\n","         MaxPool2d-4           [-1, 64, 56, 56]               0\n","            Conv2d-5           [-1, 64, 56, 56]          36,864\n","       BatchNorm2d-6           [-1, 64, 56, 56]             128\n","              ReLU-7           [-1, 64, 56, 56]               0\n","            Conv2d-8           [-1, 64, 56, 56]          36,864\n","       BatchNorm2d-9           [-1, 64, 56, 56]             128\n","             ReLU-10           [-1, 64, 56, 56]               0\n","       BasicBlock-11           [-1, 64, 56, 56]               0\n","           Conv2d-12           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-13           [-1, 64, 56, 56]             128\n","             ReLU-14           [-1, 64, 56, 56]               0\n","           Conv2d-15           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-16           [-1, 64, 56, 56]             128\n","             ReLU-17           [-1, 64, 56, 56]               0\n","       BasicBlock-18           [-1, 64, 56, 56]               0\n","           Conv2d-19           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-20           [-1, 64, 56, 56]             128\n","             ReLU-21           [-1, 64, 56, 56]               0\n","           Conv2d-22           [-1, 64, 56, 56]          36,864\n","      BatchNorm2d-23           [-1, 64, 56, 56]             128\n","             ReLU-24           [-1, 64, 56, 56]               0\n","       BasicBlock-25           [-1, 64, 56, 56]               0\n","           Conv2d-26          [-1, 128, 28, 28]          73,728\n","      BatchNorm2d-27          [-1, 128, 28, 28]             256\n","             ReLU-28          [-1, 128, 28, 28]               0\n","           Conv2d-29          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-30          [-1, 128, 28, 28]             256\n","           Conv2d-31          [-1, 128, 28, 28]           8,192\n","      BatchNorm2d-32          [-1, 128, 28, 28]             256\n","             ReLU-33          [-1, 128, 28, 28]               0\n","       BasicBlock-34          [-1, 128, 28, 28]               0\n","           Conv2d-35          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-36          [-1, 128, 28, 28]             256\n","             ReLU-37          [-1, 128, 28, 28]               0\n","           Conv2d-38          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-39          [-1, 128, 28, 28]             256\n","             ReLU-40          [-1, 128, 28, 28]               0\n","       BasicBlock-41          [-1, 128, 28, 28]               0\n","           Conv2d-42          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-43          [-1, 128, 28, 28]             256\n","             ReLU-44          [-1, 128, 28, 28]               0\n","           Conv2d-45          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-46          [-1, 128, 28, 28]             256\n","             ReLU-47          [-1, 128, 28, 28]               0\n","       BasicBlock-48          [-1, 128, 28, 28]               0\n","           Conv2d-49          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-50          [-1, 128, 28, 28]             256\n","             ReLU-51          [-1, 128, 28, 28]               0\n","           Conv2d-52          [-1, 128, 28, 28]         147,456\n","      BatchNorm2d-53          [-1, 128, 28, 28]             256\n","             ReLU-54          [-1, 128, 28, 28]               0\n","       BasicBlock-55          [-1, 128, 28, 28]               0\n","           Conv2d-56          [-1, 256, 14, 14]         294,912\n","      BatchNorm2d-57          [-1, 256, 14, 14]             512\n","             ReLU-58          [-1, 256, 14, 14]               0\n","           Conv2d-59          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-60          [-1, 256, 14, 14]             512\n","           Conv2d-61          [-1, 256, 14, 14]          32,768\n","      BatchNorm2d-62          [-1, 256, 14, 14]             512\n","             ReLU-63          [-1, 256, 14, 14]               0\n","       BasicBlock-64          [-1, 256, 14, 14]               0\n","           Conv2d-65          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-66          [-1, 256, 14, 14]             512\n","             ReLU-67          [-1, 256, 14, 14]               0\n","           Conv2d-68          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-69          [-1, 256, 14, 14]             512\n","             ReLU-70          [-1, 256, 14, 14]               0\n","       BasicBlock-71          [-1, 256, 14, 14]               0\n","           Conv2d-72          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-73          [-1, 256, 14, 14]             512\n","             ReLU-74          [-1, 256, 14, 14]               0\n","           Conv2d-75          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-76          [-1, 256, 14, 14]             512\n","             ReLU-77          [-1, 256, 14, 14]               0\n","       BasicBlock-78          [-1, 256, 14, 14]               0\n","           Conv2d-79          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-80          [-1, 256, 14, 14]             512\n","             ReLU-81          [-1, 256, 14, 14]               0\n","           Conv2d-82          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-83          [-1, 256, 14, 14]             512\n","             ReLU-84          [-1, 256, 14, 14]               0\n","       BasicBlock-85          [-1, 256, 14, 14]               0\n","           Conv2d-86          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-87          [-1, 256, 14, 14]             512\n","             ReLU-88          [-1, 256, 14, 14]               0\n","           Conv2d-89          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-90          [-1, 256, 14, 14]             512\n","             ReLU-91          [-1, 256, 14, 14]               0\n","       BasicBlock-92          [-1, 256, 14, 14]               0\n","           Conv2d-93          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-94          [-1, 256, 14, 14]             512\n","             ReLU-95          [-1, 256, 14, 14]               0\n","           Conv2d-96          [-1, 256, 14, 14]         589,824\n","      BatchNorm2d-97          [-1, 256, 14, 14]             512\n","             ReLU-98          [-1, 256, 14, 14]               0\n","       BasicBlock-99          [-1, 256, 14, 14]               0\n","          Conv2d-100            [-1, 512, 7, 7]       1,179,648\n","     BatchNorm2d-101            [-1, 512, 7, 7]           1,024\n","            ReLU-102            [-1, 512, 7, 7]               0\n","          Conv2d-103            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-104            [-1, 512, 7, 7]           1,024\n","          Conv2d-105            [-1, 512, 7, 7]         131,072\n","     BatchNorm2d-106            [-1, 512, 7, 7]           1,024\n","            ReLU-107            [-1, 512, 7, 7]               0\n","      BasicBlock-108            [-1, 512, 7, 7]               0\n","          Conv2d-109            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-110            [-1, 512, 7, 7]           1,024\n","            ReLU-111            [-1, 512, 7, 7]               0\n","          Conv2d-112            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-113            [-1, 512, 7, 7]           1,024\n","            ReLU-114            [-1, 512, 7, 7]               0\n","      BasicBlock-115            [-1, 512, 7, 7]               0\n","          Conv2d-116            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-117            [-1, 512, 7, 7]           1,024\n","            ReLU-118            [-1, 512, 7, 7]               0\n","          Conv2d-119            [-1, 512, 7, 7]       2,359,296\n","     BatchNorm2d-120            [-1, 512, 7, 7]           1,024\n","            ReLU-121            [-1, 512, 7, 7]               0\n","      BasicBlock-122            [-1, 512, 7, 7]               0\n","AdaptiveAvgPool2d-123            [-1, 512, 1, 1]               0\n","          Linear-124                 [-1, 1000]         513,000\n","================================================================\n","Total params: 21,797,672\n","Trainable params: 21,797,672\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.57\n","Forward/backward pass size (MB): 96.29\n","Params size (MB): 83.15\n","Estimated Total Size (MB): 180.01\n","----------------------------------------------------------------\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6nzgq46V1Tbx"},"outputs":[],"source":["num_epochs=20\n","learning_rate=0.001"]},{"cell_type":"markdown","metadata":{"id":"hmJiB2hlBtLI"},"source":["## Spiral"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OORJMQUTBv-f"},"outputs":[],"source":["spiral_train_path='drive/MyDrive/parkinsons/Spiral'\n","spiral_test_path='drive/MyDrive/parkinsons/Test/Test Spiral'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CQTXemq0B0wy"},"outputs":[],"source":["spiral_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","spiral_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(spiral_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1686974058595,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"U93M2c6OB89b","outputId":"ac52e657-a29e-4620-8d7e-3ad2bbc2578f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthySpiral', 'PatientSpiral']\n","Test classes:  ['HealthySpiral', 'PatientSpiral']\n"]}],"source":["root=pathlib.Path(spiral_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(spiral_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1686974059094,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"9CC7Vb5xCcO-","outputId":"76678b41-ab51-4ed1-a907-a2e358f3c3b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["248 20\n"]}],"source":["train_count=len(glob.glob(spiral_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(spiral_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rsAJ3HKVDvX4"},"outputs":[],"source":["spiral_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(spiral_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":160048,"status":"ok","timestamp":1686974224658,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"},"user_tz":-480},"id":"1v5Tym4EDvxJ","outputId":"f66785cb-d196-48e0-ec9d-ee91d2843a63"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(17.6065) Train Accuracy: 0.532258064516129 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(13.2484) Train Accuracy: 0.6733870967741935 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(7.8952) Train Accuracy: 0.7741935483870968 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(2.7384) Train Accuracy: 0.8870967741935484 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(2.7763) Train Accuracy: 0.875 Test Accuracy: 0.6\n","Epoch: 5 Train Loss: tensor(1.1297) Train Accuracy: 0.9395161290322581 Test Accuracy: 0.85\n","Epoch: 6 Train Loss: tensor(1.9445) Train Accuracy: 0.907258064516129 Test Accuracy: 0.8\n","Epoch: 7 Train Loss: tensor(0.9254) Train Accuracy: 0.9233870967741935 Test Accuracy: 0.8\n","Epoch: 8 Train Loss: tensor(0.3969) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.8\n","Epoch: 9 Train Loss: tensor(0.2050) Train Accuracy: 0.9717741935483871 Test Accuracy: 0.9\n","Epoch: 10 Train Loss: tensor(0.1074) Train Accuracy: 0.9798387096774194 Test Accuracy: 0.95\n","Epoch: 11 Train Loss: tensor(0.0546) Train Accuracy: 0.9838709677419355 Test Accuracy: 0.85\n","Epoch: 12 Train Loss: tensor(0.0314) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 13 Train Loss: tensor(3.0765e-06) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 14 Train Loss: tensor(0.0020) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 15 Train Loss: tensor(0.0300) Train Accuracy: 0.9919354838709677 Test Accuracy: 0.9\n","Epoch: 16 Train Loss: tensor(1.0701e-05) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 17 Train Loss: tensor(2.3041e-06) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 18 Train Loss: tensor(0.0001) Train Accuracy: 1.0 Test Accuracy: 0.9\n","Epoch: 19 Train Loss: tensor(0.0246) Train Accuracy: 0.9959677419354839 Test Accuracy: 0.9\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    spiral_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(spiral_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=spiral_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    spiral_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(spiral_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=spiral_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(spiral_model.state_dict(),'best_checkpoint.spiral_model')\n","        best_accuracy=test_accuracy\n"]},{"cell_type":"markdown","metadata":{"id":"W8mj6EXpSRQW"},"source":["# Meander"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeDbhMIGSTYG"},"outputs":[],"source":["meander_train_path='drive/MyDrive/parkinsons/Meander'\n","meander_test_path='drive/MyDrive/parkinsons/Test/Test Meander'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zI5niO7aSWwO"},"outputs":[],"source":["meander_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","meander_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(meander_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMjGldWQSsGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974225894,"user_tz":-480,"elapsed":26,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"1f9fec16-1dbd-49d3-c096-795a5ffc8fb5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['HealthyMeander', 'PatientMeander']\n","Test classes:  ['HealthyMeander', 'PatientMeander']\n"]}],"source":["root=pathlib.Path(meander_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(meander_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrN8lM8nSs47","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974225896,"user_tz":-480,"elapsed":17,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"343f3144-20c8-4d06-8c04-2739fbd0803c"},"outputs":[{"output_type":"stream","name":"stdout","text":["244 20\n"]}],"source":["train_count=len(glob.glob(meander_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(meander_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Y5T9jogSunn"},"outputs":[],"source":["meander_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(meander_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcEHXfEiSwPR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974359029,"user_tz":-480,"elapsed":133143,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"d909b64b-47f2-432d-beda-853142c58808"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(13.5665) Train Accuracy: 0.5819672131147541 Test Accuracy: 0.6\n","Epoch: 1 Train Loss: tensor(8.0133) Train Accuracy: 0.6639344262295082 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(2.7520) Train Accuracy: 0.8483606557377049 Test Accuracy: 0.75\n","Epoch: 3 Train Loss: tensor(1.9431) Train Accuracy: 0.8524590163934426 Test Accuracy: 0.8\n","Epoch: 4 Train Loss: tensor(1.0500) Train Accuracy: 0.9139344262295082 Test Accuracy: 0.65\n","Epoch: 5 Train Loss: tensor(1.4098) Train Accuracy: 0.9180327868852459 Test Accuracy: 0.75\n","Epoch: 6 Train Loss: tensor(0.4919) Train Accuracy: 0.9508196721311475 Test Accuracy: 0.7\n","Epoch: 7 Train Loss: tensor(0.2585) Train Accuracy: 0.9631147540983607 Test Accuracy: 0.75\n","Epoch: 8 Train Loss: tensor(0.1395) Train Accuracy: 0.9836065573770492 Test Accuracy: 0.75\n","Epoch: 9 Train Loss: tensor(0.0014) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 10 Train Loss: tensor(0.0005) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 11 Train Loss: tensor(0.0137) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.75\n","Epoch: 12 Train Loss: tensor(0.0085) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.75\n","Epoch: 13 Train Loss: tensor(0.0004) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 14 Train Loss: tensor(0.0086) Train Accuracy: 0.9959016393442623 Test Accuracy: 0.8\n","Epoch: 15 Train Loss: tensor(8.7023e-05) Train Accuracy: 1.0 Test Accuracy: 0.8\n","Epoch: 16 Train Loss: tensor(1.7976e-06) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 17 Train Loss: tensor(1.0748e-07) Train Accuracy: 1.0 Test Accuracy: 0.75\n","Epoch: 18 Train Loss: tensor(1.4119e-07) Train Accuracy: 1.0 Test Accuracy: 0.7\n","Epoch: 19 Train Loss: tensor(1.5536e-07) Train Accuracy: 1.0 Test Accuracy: 0.75\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    meander_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(meander_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=meander_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    meander_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(meander_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=meander_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(meander_model.state_dict(),'best_checkpoint.meander_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"markdown","metadata":{"id":"v0OlkTAtS2yx"},"source":["# Circle"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cajwucXI9k_A"},"outputs":[],"source":["circle_train_path='drive/MyDrive/parkinsons/Circle'\n","circle_test_path='drive/MyDrive/parkinsons/Test/Test Circle'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Y9EE7rE9pIE"},"outputs":[],"source":["circle_train_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_train_path,transform=transformer),\n","    batch_size=64, shuffle=True\n",")\n","\n","circle_test_loader=DataLoader(\n","    torchvision.datasets.ImageFolder(circle_test_path,transform=transformer),\n","    batch_size=32, shuffle=True\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxaTYA2Y95Hx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974359773,"user_tz":-480,"elapsed":55,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"1fbbf76b-f766-4597-af31-604bb765333a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train classes: ['Healthy Circle', 'Patient Circle']\n","Test classes:  ['HealthyCircle', 'PatientCircle']\n"]}],"source":["root=pathlib.Path(circle_train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","print(\"Train classes: \" + str(classes))\n","\n","root_t=pathlib.Path(circle_test_path)\n","classes=sorted([j.name.split('/')[-1] for j in root_t.iterdir()])\n","print(\"Test classes:  \" + str(classes))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUfwtdas-A6L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974359776,"user_tz":-480,"elapsed":30,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"c26daadf-a74f-4273-a72f-8e9f486e19ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["56 10\n"]}],"source":["train_count=len(glob.glob(circle_train_path+'/**/*.jpg'))\n","test_count=len(glob.glob(circle_test_path+'/**/*.jpg'))\n","\n","print(train_count,test_count)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cbcuCJOu-cnm"},"outputs":[],"source":["circle_model=ConvNet(num_classes=2).to(device)\n","\n","optimizer=Adam(circle_model.parameters(),lr=learning_rate,weight_decay=0.0001)\n","loss_function=nn.CrossEntropyLoss()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C0MbmMpG-iNw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686974397578,"user_tz":-480,"elapsed":37824,"user":{"displayName":"Chirag Khandige","userId":"17214972009561511538"}},"outputId":"a5f72067-ff6c-4e21-b155-9c8e695e98bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 Train Loss: tensor(0.7268) Train Accuracy: 0.4642857142857143 Test Accuracy: 0.5\n","Epoch: 1 Train Loss: tensor(2.1248) Train Accuracy: 0.8392857142857143 Test Accuracy: 0.5\n","Epoch: 2 Train Loss: tensor(4.2302) Train Accuracy: 0.8035714285714286 Test Accuracy: 0.5\n","Epoch: 3 Train Loss: tensor(0.7584) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 4 Train Loss: tensor(3.4444) Train Accuracy: 0.75 Test Accuracy: 0.5\n","Epoch: 5 Train Loss: tensor(0.0764) Train Accuracy: 0.9821428571428571 Test Accuracy: 0.5\n","Epoch: 6 Train Loss: tensor(0.7760) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.5\n","Epoch: 7 Train Loss: tensor(1.2545) Train Accuracy: 0.9285714285714286 Test Accuracy: 0.3\n","Epoch: 8 Train Loss: tensor(0.4182) Train Accuracy: 0.9464285714285714 Test Accuracy: 0.4\n","Epoch: 9 Train Loss: tensor(2.3416e-07) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 10 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 11 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 12 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 13 Train Loss: tensor(0.) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 14 Train Loss: tensor(2.1287e-08) Train Accuracy: 1.0 Test Accuracy: 0.3\n","Epoch: 15 Train Loss: tensor(4.1080e-06) Train Accuracy: 1.0 Test Accuracy: 0.4\n","Epoch: 16 Train Loss: tensor(0.0004) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 17 Train Loss: tensor(0.0112) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 18 Train Loss: tensor(0.0010) Train Accuracy: 1.0 Test Accuracy: 0.5\n","Epoch: 19 Train Loss: tensor(0.0001) Train Accuracy: 1.0 Test Accuracy: 0.4\n"]}],"source":["best_accuracy=0.0\n","\n","for epoch in range(num_epochs):\n","\n","    circle_model.train()\n","    train_accuracy=0.0\n","    train_loss=0.0\n","\n","    for i, (images,labels) in enumerate(circle_train_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        optimizer.zero_grad()\n","\n","        outputs=circle_model(images)\n","        loss=loss_function(outputs,labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss+= loss.cpu().data*images.size(0)\n","        _,prediction=torch.max(outputs.data,1)\n","\n","        train_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    train_accuracy=train_accuracy/train_count\n","    train_loss=train_loss/train_count\n","\n","\n","\n","\n","    circle_model.eval()\n","\n","    test_accuracy=0.0\n","    for i, (images,labels) in enumerate(circle_test_loader):\n","        if torch.cuda.is_available():\n","            images=Variable(images.cuda())\n","            labels=Variable(labels.cuda())\n","\n","        outputs=circle_model(images)\n","        _,prediction=torch.max(outputs.data,1)\n","        test_accuracy+=int(torch.sum(prediction==labels.data))\n","\n","    test_accuracy=test_accuracy/test_count\n","\n","\n","    print('Epoch: '+str(epoch)+' Train Loss: '+str(train_loss)+' Train Accuracy: '+str(train_accuracy)+' Test Accuracy: '+str(test_accuracy))\n","\n","\n","\n","\n","    if test_accuracy>best_accuracy:\n","        torch.save(circle_model.state_dict(),'best_checkpoint.circle_model')\n","        best_accuracy=test_accuracy"]},{"cell_type":"code","source":[],"metadata":{"id":"ef7WsfcyvtHg"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1APSJkVmoEPCrvgYHjly8qaDPswSl2DX7","timestamp":1686550675323}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}